
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000814  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000314  00800060  00000814  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000145a  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ac  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093f  00000000  00000000  00002ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d7  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3a  00000000  00000000  00003b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 30 03 	call	0x660	; 0x660 <main>
  7a:	0c 94 08 04 	jmp	0x810	; 0x810 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_init_channel>:
	for(int i = 0; i<size;i++)
	{
		data |= (Dio_Read_channel(ch[i])<<i);
	}
	return data;
}
  82:	80 32       	cpi	r24, 0x20	; 32
  84:	08 f0       	brcs	.+2      	; 0x88 <Dio_init_channel+0x6>
  86:	a5 c0       	rjmp	.+330    	; 0x1d2 <Dio_init_channel+0x150>
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	fc 01       	movw	r30, r24
  8e:	ee 0f       	add	r30, r30
  90:	ff 1f       	adc	r31, r31
  92:	e0 5a       	subi	r30, 0xA0	; 160
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	20 81       	ld	r18, Z
  98:	21 30       	cpi	r18, 0x01	; 1
  9a:	69 f1       	breq	.+90     	; 0xf6 <Dio_init_channel+0x74>
  9c:	38 f0       	brcs	.+14     	; 0xac <Dio_init_channel+0x2a>
  9e:	22 30       	cpi	r18, 0x02	; 2
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_init_channel+0x22>
  a2:	4e c0       	rjmp	.+156    	; 0x140 <Dio_init_channel+0xbe>
  a4:	23 30       	cpi	r18, 0x03	; 3
  a6:	09 f4       	brne	.+2      	; 0xaa <Dio_init_channel+0x28>
  a8:	70 c0       	rjmp	.+224    	; 0x18a <Dio_init_channel+0x108>
  aa:	08 95       	ret
  ac:	66 23       	and	r22, r22
  ae:	89 f0       	breq	.+34     	; 0xd2 <Dio_init_channel+0x50>
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	fc 01       	movw	r30, r24
  b8:	e0 5a       	subi	r30, 0xA0	; 160
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 80       	ldd	r0, Z+1	; 0x01
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dio_init_channel+0x46>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dio_init_channel+0x42>
  cc:	82 2b       	or	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	fc 01       	movw	r30, r24
  da:	e0 5a       	subi	r30, 0xA0	; 160
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 80       	ldd	r0, Z+1	; 0x01
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_init_channel+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_init_channel+0x64>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	08 95       	ret
  f6:	66 23       	and	r22, r22
  f8:	89 f0       	breq	.+34     	; 0x11c <Dio_init_channel+0x9a>
  fa:	27 b3       	in	r18, 0x17	; 23
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	fc 01       	movw	r30, r24
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 80       	ldd	r0, Z+1	; 0x01
 10c:	02 c0       	rjmp	.+4      	; 0x112 <Dio_init_channel+0x90>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <Dio_init_channel+0x8c>
 116:	82 2b       	or	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	fc 01       	movw	r30, r24
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 80       	ldd	r0, Z+1	; 0x01
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Dio_init_channel+0xb2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <Dio_init_channel+0xae>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret
 140:	66 23       	and	r22, r22
 142:	89 f0       	breq	.+34     	; 0x166 <Dio_init_channel+0xe4>
 144:	24 b3       	in	r18, 0x14	; 20
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	fc 01       	movw	r30, r24
 14c:	e0 5a       	subi	r30, 0xA0	; 160
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 80       	ldd	r0, Z+1	; 0x01
 156:	02 c0       	rjmp	.+4      	; 0x15c <Dio_init_channel+0xda>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Dio_init_channel+0xd6>
 160:	82 2b       	or	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	24 b3       	in	r18, 0x14	; 20
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	fc 01       	movw	r30, r24
 16e:	e0 5a       	subi	r30, 0xA0	; 160
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 80       	ldd	r0, Z+1	; 0x01
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_init_channel+0xfc>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_init_channel+0xf8>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	84 bb       	out	0x14, r24	; 20
 188:	08 95       	ret
 18a:	66 23       	and	r22, r22
 18c:	89 f0       	breq	.+34     	; 0x1b0 <Dio_init_channel+0x12e>
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	fc 01       	movw	r30, r24
 196:	e0 5a       	subi	r30, 0xA0	; 160
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 80       	ldd	r0, Z+1	; 0x01
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_init_channel+0x124>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_init_channel+0x120>
 1aa:	82 2b       	or	r24, r18
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	fc 01       	movw	r30, r24
 1b8:	e0 5a       	subi	r30, 0xA0	; 160
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 80       	ldd	r0, Z+1	; 0x01
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Dio_init_channel+0x146>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <Dio_init_channel+0x142>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret

000001d4 <Dio_Write_channel>:
 1d4:	80 32       	cpi	r24, 0x20	; 32
 1d6:	08 f0       	brcs	.+2      	; 0x1da <Dio_Write_channel+0x6>
 1d8:	a5 c0       	rjmp	.+330    	; 0x324 <Dio_Write_channel+0x150>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e0 5a       	subi	r30, 0xA0	; 160
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	20 81       	ld	r18, Z
 1ea:	21 30       	cpi	r18, 0x01	; 1
 1ec:	69 f1       	breq	.+90     	; 0x248 <Dio_Write_channel+0x74>
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <Dio_Write_channel+0x2a>
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <Dio_Write_channel+0x22>
 1f4:	4e c0       	rjmp	.+156    	; 0x292 <Dio_Write_channel+0xbe>
 1f6:	23 30       	cpi	r18, 0x03	; 3
 1f8:	09 f4       	brne	.+2      	; 0x1fc <Dio_Write_channel+0x28>
 1fa:	70 c0       	rjmp	.+224    	; 0x2dc <Dio_Write_channel+0x108>
 1fc:	08 95       	ret
 1fe:	66 23       	and	r22, r22
 200:	89 f0       	breq	.+34     	; 0x224 <Dio_Write_channel+0x50>
 202:	2b b3       	in	r18, 0x1b	; 27
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	fc 01       	movw	r30, r24
 20a:	e0 5a       	subi	r30, 0xA0	; 160
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 80       	ldd	r0, Z+1	; 0x01
 214:	02 c0       	rjmp	.+4      	; 0x21a <Dio_Write_channel+0x46>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <Dio_Write_channel+0x42>
 21e:	82 2b       	or	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	fc 01       	movw	r30, r24
 22c:	e0 5a       	subi	r30, 0xA0	; 160
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 80       	ldd	r0, Z+1	; 0x01
 236:	02 c0       	rjmp	.+4      	; 0x23c <Dio_Write_channel+0x68>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <Dio_Write_channel+0x64>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	8b bb       	out	0x1b, r24	; 27
 246:	08 95       	ret
 248:	66 23       	and	r22, r22
 24a:	89 f0       	breq	.+34     	; 0x26e <Dio_Write_channel+0x9a>
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	fc 01       	movw	r30, r24
 254:	e0 5a       	subi	r30, 0xA0	; 160
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 80       	ldd	r0, Z+1	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Dio_Write_channel+0x90>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <Dio_Write_channel+0x8c>
 268:	82 2b       	or	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
 26e:	28 b3       	in	r18, 0x18	; 24
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	fc 01       	movw	r30, r24
 276:	e0 5a       	subi	r30, 0xA0	; 160
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 80       	ldd	r0, Z+1	; 0x01
 280:	02 c0       	rjmp	.+4      	; 0x286 <Dio_Write_channel+0xb2>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <Dio_Write_channel+0xae>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	88 bb       	out	0x18, r24	; 24
 290:	08 95       	ret
 292:	66 23       	and	r22, r22
 294:	89 f0       	breq	.+34     	; 0x2b8 <Dio_Write_channel+0xe4>
 296:	25 b3       	in	r18, 0x15	; 21
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	fc 01       	movw	r30, r24
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 80       	ldd	r0, Z+1	; 0x01
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Dio_Write_channel+0xda>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Dio_Write_channel+0xd6>
 2b2:	82 2b       	or	r24, r18
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	08 95       	ret
 2b8:	25 b3       	in	r18, 0x15	; 21
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	fc 01       	movw	r30, r24
 2c0:	e0 5a       	subi	r30, 0xA0	; 160
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 80       	ldd	r0, Z+1	; 0x01
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Dio_Write_channel+0xfc>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Dio_Write_channel+0xf8>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	08 95       	ret
 2dc:	66 23       	and	r22, r22
 2de:	89 f0       	breq	.+34     	; 0x302 <Dio_Write_channel+0x12e>
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	fc 01       	movw	r30, r24
 2e8:	e0 5a       	subi	r30, 0xA0	; 160
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 80       	ldd	r0, Z+1	; 0x01
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Dio_Write_channel+0x124>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <Dio_Write_channel+0x120>
 2fc:	82 2b       	or	r24, r18
 2fe:	82 bb       	out	0x12, r24	; 18
 300:	08 95       	ret
 302:	22 b3       	in	r18, 0x12	; 18
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	fc 01       	movw	r30, r24
 30a:	e0 5a       	subi	r30, 0xA0	; 160
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 80       	ldd	r0, Z+1	; 0x01
 314:	02 c0       	rjmp	.+4      	; 0x31a <Dio_Write_channel+0x146>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Dio_Write_channel+0x142>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	82 bb       	out	0x12, r24	; 18
 324:	08 95       	ret

00000326 <Dio_Write_channel_group>:
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	8c 01       	movw	r16, r24
 334:	f6 2e       	mov	r15, r22
 336:	e4 2e       	mov	r14, r20
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	19 c0       	rjmp	.+50     	; 0x370 <Dio_Write_channel_group+0x4a>
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	0c 2e       	mov	r0, r28
 344:	02 c0       	rjmp	.+4      	; 0x34a <Dio_Write_channel_group+0x24>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <Dio_Write_channel_group+0x20>
 34e:	8e 2d       	mov	r24, r14
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	68 23       	and	r22, r24
 354:	79 23       	and	r23, r25
 356:	0c 2e       	mov	r0, r28
 358:	02 c0       	rjmp	.+4      	; 0x35e <Dio_Write_channel_group+0x38>
 35a:	75 95       	asr	r23
 35c:	67 95       	ror	r22
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <Dio_Write_channel_group+0x34>
 362:	f8 01       	movw	r30, r16
 364:	ec 0f       	add	r30, r28
 366:	fd 1f       	adc	r31, r29
 368:	80 81       	ld	r24, Z
 36a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	8f 2d       	mov	r24, r15
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	c8 17       	cp	r28, r24
 376:	d9 07       	cpc	r29, r25
 378:	14 f3       	brlt	.-60     	; 0x33e <Dio_Write_channel_group+0x18>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	08 95       	ret

00000388 <Dio_init_channel_group>:

 void	Dio_init_channel_group	(	uint8_t* ch	,	uint8_t size	,	Dio_dir* DIR		)
 {
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	7c 01       	movw	r14, r24
 398:	d6 2e       	mov	r13, r22
 39a:	8a 01       	movw	r16, r20
	 for(int i = 0; i<size;i++)
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
 3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <Dio_init_channel_group+0x30>
	 {
	 Dio_init_channel(ch[i],DIR[i]);
 3a2:	d8 01       	movw	r26, r16
 3a4:	ac 0f       	add	r26, r28
 3a6:	bd 1f       	adc	r27, r29
 3a8:	f7 01       	movw	r30, r14
 3aa:	ec 0f       	add	r30, r28
 3ac:	fd 1f       	adc	r31, r29
 3ae:	6c 91       	ld	r22, X
 3b0:	80 81       	ld	r24, Z
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_init_channel>
	return data;
}

 void	Dio_init_channel_group	(	uint8_t* ch	,	uint8_t size	,	Dio_dir* DIR		)
 {
	 for(int i = 0; i<size;i++)
 3b6:	21 96       	adiw	r28, 0x01	; 1
 3b8:	8d 2d       	mov	r24, r13
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	c8 17       	cp	r28, r24
 3be:	d9 07       	cpc	r29, r25
 3c0:	84 f3       	brlt	.-32     	; 0x3a2 <Dio_init_channel_group+0x1a>
	 {
	 Dio_init_channel(ch[i],DIR[i]);
	 }
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	08 95       	ret

000003d2 <SELECTFIRST>:
#include "Dio.h"
#include "GLCD_cfg.h"
#include "GLCD.h"

 void SELECTBOTH()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 void SELECTFIRST()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_LOW)		   ;  }
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	8d e0       	ldi	r24, 0x0D	; 13
 3de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 3e2:	08 95       	ret

000003e4 <SELECTSECOND>:
 void SELECTSECOND()	{Dio_Write_channel(CS1,!STD_LOW) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	8d e0       	ldi	r24, 0x0D	; 13
 3f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 3f4:	08 95       	ret

000003f6 <GLCD_Command>:


void GLCD_Command(char Command)		/* GLCD command function */
{
	Dio_Write_channel_group(dataport,8,Command);		/* Copy command on data pin */
 3f6:	48 2f       	mov	r20, r24
 3f8:	68 e0       	ldi	r22, 0x08	; 8
 3fa:	86 ea       	ldi	r24, 0xA6	; 166
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 93 01 	call	0x326	; 0x326 <Dio_Write_channel_group>
	Dio_Write_channel(RS,STD_LOW) ;						/* Make RS LOW for command register*/
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	89 e0       	ldi	r24, 0x09	; 9
 406:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	Dio_Write_channel(RW,STD_LOW) ;						/* Make RW LOW for write operation */
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	Dio_Write_channel(EN,STD_HIGH); 					/* Make HIGH-LOW transition on Enable */
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	8b e0       	ldi	r24, 0x0B	; 11
 416:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41a:	8d e0       	ldi	r24, 0x0D	; 13
 41c:	8a 95       	dec	r24
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	00 00       	nop
	_delay_us(5);
	Dio_Write_channel(EN,STD_LOW);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	8b e0       	ldi	r24, 0x0B	; 11
 426:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 42a:	8d e0       	ldi	r24, 0x0D	; 13
 42c:	8a 95       	dec	r24
 42e:	f1 f7       	brne	.-4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 430:	00 00       	nop
 432:	08 95       	ret

00000434 <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)		/* GLCD data function */
{
	Dio_Write_channel_group(dataport,8,Data);		/* Copy command on data pin */
 434:	48 2f       	mov	r20, r24
 436:	68 e0       	ldi	r22, 0x08	; 8
 438:	86 ea       	ldi	r24, 0xA6	; 166
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 93 01 	call	0x326	; 0x326 <Dio_Write_channel_group>
	Dio_Write_channel(RS,STD_HIGH) ;						/* Make RS LOW for command register*/
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	89 e0       	ldi	r24, 0x09	; 9
 444:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	Dio_Write_channel(RW,STD_LOW) ;						/* Make RW LOW for write operation */
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	8a e0       	ldi	r24, 0x0A	; 10
 44c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	Dio_Write_channel(EN,STD_HIGH); 					/* Make HIGH-LOW transition on Enable */
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	8b e0       	ldi	r24, 0x0B	; 11
 454:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 458:	8d e0       	ldi	r24, 0x0D	; 13
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <GLCD_Data+0x26>
 45e:	00 00       	nop
	_delay_us(5);
	Dio_Write_channel(EN,STD_LOW);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	8b e0       	ldi	r24, 0x0B	; 11
 464:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 468:	8d e0       	ldi	r24, 0x0D	; 13
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <GLCD_Data+0x36>
 46e:	00 00       	nop
 470:	08 95       	ret

00000472 <GLCD_Init>:
	_delay_us(5);
}

void GLCD_Init()			/* GLCD initialize function */
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	2e 97       	sbiw	r28, 0x0e	; 14
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
	Dio_dir dataportdir[] ={STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT};
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	ee ea       	ldi	r30, 0xAE	; 174
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	de 01       	movw	r26, r28
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <GLCD_Init+0x1e>
	Dio_init_channel_group(dataport,	8,	dataportdir);
 498:	ae 01       	movw	r20, r28
 49a:	4f 5f       	subi	r20, 0xFF	; 255
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	68 e0       	ldi	r22, 0x08	; 8
 4a0:	86 ea       	ldi	r24, 0xA6	; 166
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 c4 01 	call	0x388	; 0x388 <Dio_init_channel_group>

	
	Dio_dir cmddir[] ={STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT};
 4a8:	86 e0       	ldi	r24, 0x06	; 6
 4aa:	e6 eb       	ldi	r30, 0xB6	; 182
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	de 01       	movw	r26, r28
 4b0:	19 96       	adiw	r26, 0x09	; 9
 4b2:	01 90       	ld	r0, Z+
 4b4:	0d 92       	st	X+, r0
 4b6:	8a 95       	dec	r24
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <GLCD_Init+0x40>
	Dio_init_channel_group(cmd,	6,	cmddir);
 4ba:	ae 01       	movw	r20, r28
 4bc:	47 5f       	subi	r20, 0xF7	; 247
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	66 e0       	ldi	r22, 0x06	; 6
 4c2:	80 ea       	ldi	r24, 0xA0	; 160
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 c4 01 	call	0x388	; 0x388 <Dio_init_channel_group>

#include "Dio.h"
#include "GLCD_cfg.h"
#include "GLCD.h"

 void SELECTBOTH()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	8c e0       	ldi	r24, 0x0C	; 12
 4ce:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	8d e0       	ldi	r24, 0x0D	; 13
 4d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	Dio_dir cmddir[] ={STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT,STD_OUTPUT};
	Dio_init_channel_group(cmd,	6,	cmddir);

	/* Select both left & right half of display & Keep reset pin high */
	SELECTBOTH();
	Dio_Write_channel(RST,STD_HIGH) ;
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	8e e0       	ldi	r24, 0x0E	; 14
 4de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e2:	8f e3       	ldi	r24, 0x3F	; 63
 4e4:	9c e9       	ldi	r25, 0x9C	; 156
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <GLCD_Init+0x74>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <GLCD_Init+0x7a>
 4ec:	00 00       	nop
	
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
 4ee:	8e e3       	ldi	r24, 0x3E	; 62
 4f0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 4fa:	88 eb       	ldi	r24, 0xB8	; 184
 4fc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
 500:	80 ec       	ldi	r24, 0xC0	; 192
 502:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
 506:	8f e3       	ldi	r24, 0x3F	; 63
 508:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
}
 50c:	2e 96       	adiw	r28, 0x0e	; 14
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <GLCD_PrintChar>:
void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	f8 2e       	mov	r15, r24
 52c:	e6 2e       	mov	r14, r22
	int i = col ;
	for(i = col; i < 5+col; i++)
 52e:	04 2f       	mov	r16, r20
 530:	10 e0       	ldi	r17, 0x00	; 0
 532:	e8 01       	movw	r28, r16
 534:	27 c0       	rjmp	.+78     	; 0x584 <GLCD_PrintChar+0x66>
	{
		if (64==i) {
 536:	c0 34       	cpi	r28, 0x40	; 64
 538:	d1 05       	cpc	r29, r1
 53a:	79 f4       	brne	.+30     	; 0x55a <GLCD_PrintChar+0x3c>
#include "GLCD_cfg.h"
#include "GLCD.h"

 void SELECTBOTH()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 void SELECTFIRST()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_LOW)		   ;  }
 void SELECTSECOND()	{Dio_Write_channel(CS1,!STD_LOW) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	8c e0       	ldi	r24, 0x0C	; 12
 540:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	8d e0       	ldi	r24, 0x0D	; 13
 548:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
	int i = col ;
	for(i = col; i < 5+col; i++)
	{
		if (64==i) {
			SELECTSECOND();
			GLCD_Command(0x40);		/* Set Y address (column=0) */
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
			GLCD_Command(0xB8+row);
 552:	88 eb       	ldi	r24, 0xB8	; 184
 554:	8e 0d       	add	r24, r14
 556:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		}
		GLCD_Data(font[x][i-col]);
 55a:	9e 01       	movw	r18, r28
 55c:	20 1b       	sub	r18, r16
 55e:	31 0b       	sbc	r19, r17
 560:	8f 2d       	mov	r24, r15
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	ac 01       	movw	r20, r24
 566:	44 0f       	add	r20, r20
 568:	55 1f       	adc	r21, r21
 56a:	44 0f       	add	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	84 0f       	add	r24, r20
 570:	95 1f       	adc	r25, r21
 572:	84 54       	subi	r24, 0x44	; 68
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	fc 01       	movw	r30, r24
 578:	e2 0f       	add	r30, r18
 57a:	f3 1f       	adc	r31, r19
 57c:	80 81       	ld	r24, Z
 57e:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_Data>
	GLCD_Command(0x3F);		/* Display ON */
}
void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
	int i = col ;
	for(i = col; i < 5+col; i++)
 582:	21 96       	adiw	r28, 0x01	; 1
 584:	c8 01       	movw	r24, r16
 586:	05 96       	adiw	r24, 0x05	; 5
 588:	c8 17       	cp	r28, r24
 58a:	d9 07       	cpc	r29, r25
 58c:	a4 f2       	brlt	.-88     	; 0x536 <GLCD_PrintChar+0x18>
			GLCD_Command(0x40);		/* Set Y address (column=0) */
			GLCD_Command(0xB8+row);
		}
		GLCD_Data(font[x][i-col]);
	}
}
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	ff 90       	pop	r15
 598:	ef 90       	pop	r14
 59a:	08 95       	ret

0000059c <Print_String>:
void Print_String(char* x,uint8_t row)
{
 59c:	cf 92       	push	r12
 59e:	df 92       	push	r13
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	6c 01       	movw	r12, r24
 5ac:	f6 2e       	mov	r15, r22
#include "Dio.h"
#include "GLCD_cfg.h"
#include "GLCD.h"

 void SELECTBOTH()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 void SELECTFIRST()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_LOW)		   ;  }
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	8c e0       	ldi	r24, 0x0C	; 12
 5b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	8d e0       	ldi	r24, 0x0D	; 13
 5ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
}
void Print_String(char* x,uint8_t row)
{
	int i = 0,col =0;
	SELECTFIRST();
	GLCD_Command(0x40);
 5be:	80 e4       	ldi	r24, 0x40	; 64
 5c0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
	GLCD_Command((0xB8) + row);
 5c4:	88 eb       	ldi	r24, 0xB8	; 184
 5c6:	8f 0d       	add	r24, r15
 5c8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		GLCD_Data(font[x][i-col]);
	}
}
void Print_String(char* x,uint8_t row)
{
	int i = 0,col =0;
 5cc:	00 e0       	ldi	r16, 0x00	; 0
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	c0 e0       	ldi	r28, 0x00	; 0
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
	SELECTFIRST();
	GLCD_Command(0x40);
	GLCD_Command((0xB8) + row);
	
	while (x[i])
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <Print_String+0x48>
	{
		GLCD_PrintChar(x[i],row,col);
 5d6:	40 2f       	mov	r20, r16
 5d8:	6f 2d       	mov	r22, r15
 5da:	0e 94 8f 02 	call	0x51e	; 0x51e <GLCD_PrintChar>
		i++; col+=5;
 5de:	21 96       	adiw	r28, 0x01	; 1
 5e0:	0b 5f       	subi	r16, 0xFB	; 251
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
	int i = 0,col =0;
	SELECTFIRST();
	GLCD_Command(0x40);
	GLCD_Command((0xB8) + row);
	
	while (x[i])
 5e4:	f6 01       	movw	r30, r12
 5e6:	ec 0f       	add	r30, r28
 5e8:	fd 1f       	adc	r31, r29
 5ea:	80 81       	ld	r24, Z
 5ec:	81 11       	cpse	r24, r1
 5ee:	f3 cf       	rjmp	.-26     	; 0x5d6 <Print_String+0x3a>
	{
		GLCD_PrintChar(x[i],row,col);
		i++; col+=5;
	}
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	08 95       	ret

00000600 <GLCD_ClearAll>:
void GLCD_ClearAll()			/* GLCD all display clear function */
{
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29

#include "Dio.h"
#include "GLCD_cfg.h"
#include "GLCD.h"

 void SELECTBOTH()	{Dio_Write_channel(CS1,!STD_HIGH) ;Dio_Write_channel(CS2,!STD_HIGH)		   ;  }
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	8c e0       	ldi	r24, 0x0C	; 12
 60c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	8d e0       	ldi	r24, 0x0D	; 13
 614:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_Write_channel>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;

	SELECTBOTH();
	for(i = 0; i < 8; i++)
 618:	00 e0       	ldi	r16, 0x00	; 0
 61a:	10 e0       	ldi	r17, 0x00	; 0
 61c:	13 c0       	rjmp	.+38     	; 0x644 <GLCD_ClearAll+0x44>
	{
		
		GLCD_Command(0x40);
 61e:	80 e4       	ldi	r24, 0x40	; 64
 620:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		GLCD_Command((0xB8) + i);
 624:	88 eb       	ldi	r24, 0xB8	; 184
 626:	80 0f       	add	r24, r16
 628:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>

		for(j = 0; j < 64 ; j++)
 62c:	c0 e0       	ldi	r28, 0x00	; 0
 62e:	d0 e0       	ldi	r29, 0x00	; 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <GLCD_ClearAll+0x3a>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_Data>
	{
		
		GLCD_Command(0x40);
		GLCD_Command((0xB8) + i);

		for(j = 0; j < 64 ; j++)
 638:	21 96       	adiw	r28, 0x01	; 1
 63a:	c0 34       	cpi	r28, 0x40	; 64
 63c:	d1 05       	cpc	r29, r1
 63e:	cc f3       	brlt	.-14     	; 0x632 <GLCD_ClearAll+0x32>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;

	SELECTBOTH();
	for(i = 0; i < 8; i++)
 640:	0f 5f       	subi	r16, 0xFF	; 255
 642:	1f 4f       	sbci	r17, 0xFF	; 255
 644:	08 30       	cpi	r16, 0x08	; 8
 646:	11 05       	cpc	r17, r1
 648:	54 f3       	brlt	.-44     	; 0x61e <GLCD_ClearAll+0x1e>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
			//delay_us(5000);
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 64a:	80 e4       	ldi	r24, 0x40	; 64
 64c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 650:	88 eb       	ldi	r24, 0xB8	; 184
 652:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>


}
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	08 95       	ret

00000660 <main>:




int main(void)
{
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	a6 97       	sbiw	r28, 0x26	; 38
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
	GLCD_Init();
 674:	0e 94 39 02 	call	0x472	; 0x472 <GLCD_Init>
	GLCD_ClearAll();
 678:	0e 94 00 03 	call	0x600	; 0x600 <GLCD_ClearAll>
	Print_String("PWM Signal ",1);
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	81 e4       	ldi	r24, 0x41	; 65
 680:	93 e0       	ldi	r25, 0x03	; 3
 682:	0e 94 ce 02 	call	0x59c	; 0x59c <Print_String>

	int pwmvalue = 0;
	int timefactor = 10;
	char duty[] = "Duty Cycle = 00 %";
 686:	82 e1       	ldi	r24, 0x12	; 18
 688:	ed e4       	ldi	r30, 0x4D	; 77
 68a:	f3 e0       	ldi	r31, 0x03	; 3
 68c:	de 01       	movw	r26, r28
 68e:	11 96       	adiw	r26, 0x01	; 1
 690:	01 90       	ld	r0, Z+
 692:	0d 92       	st	X+, r0
 694:	8a 95       	dec	r24
 696:	e1 f7       	brne	.-8      	; 0x690 <main+0x30>
	char freq[] = "frequency =	320 KHZ";
 698:	84 e1       	ldi	r24, 0x14	; 20
 69a:	ef e5       	ldi	r30, 0x5F	; 95
 69c:	f3 e0       	ldi	r31, 0x03	; 3
 69e:	de 01       	movw	r26, r28
 6a0:	53 96       	adiw	r26, 0x13	; 19
 6a2:	01 90       	ld	r0, Z+
 6a4:	0d 92       	st	X+, r0
 6a6:	8a 95       	dec	r24
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x42>
{
	GLCD_Init();
	GLCD_ClearAll();
	Print_String("PWM Signal ",1);

	int pwmvalue = 0;
 6aa:	81 2c       	mov	r8, r1
 6ac:	91 2c       	mov	r9, r1
	int timefactor = 10;
	char duty[] = "Duty Cycle = 00 %";
	char freq[] = "frequency =	320 KHZ";
	while(1)
	{
		SELECTFIRST();
 6ae:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SELECTFIRST>
		GLCD_Command(0x40);		/* Set Y address (column=0) */
 6b2:	80 e4       	ldi	r24, 0x40	; 64
 6b4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		GLCD_Command(0xB8+2);		/* Set x address (page=0) */
 6b8:	8a eb       	ldi	r24, 0xBA	; 186
 6ba:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		int dc = pwmvalue*100/256;
 6be:	24 e6       	ldi	r18, 0x64	; 100
 6c0:	28 9d       	mul	r18, r8
 6c2:	c0 01       	movw	r24, r0
 6c4:	29 9d       	mul	r18, r9
 6c6:	90 0d       	add	r25, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	9c 01       	movw	r18, r24
 6cc:	99 23       	and	r25, r25
 6ce:	14 f4       	brge	.+4      	; 0x6d4 <main+0x74>
 6d0:	21 50       	subi	r18, 0x01	; 1
 6d2:	3f 4f       	sbci	r19, 0xFF	; 255
 6d4:	23 2f       	mov	r18, r19
 6d6:	22 0f       	add	r18, r18
 6d8:	22 0b       	sbc	r18, r18
		duty[13] = dc/10+'0';
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	7a e0       	ldi	r23, 0x0A	; 10
 6de:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__divmodhi4>
 6e2:	60 5d       	subi	r22, 0xD0	; 208
 6e4:	6e 87       	std	Y+14, r22	; 0x0e
		duty[14] = dc%10+'0';
 6e6:	0a e0       	ldi	r16, 0x0A	; 10
 6e8:	10 e0       	ldi	r17, 0x00	; 0
 6ea:	83 2f       	mov	r24, r19
 6ec:	92 2f       	mov	r25, r18
 6ee:	b8 01       	movw	r22, r16
 6f0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__divmodhi4>
 6f4:	80 5d       	subi	r24, 0xD0	; 208
 6f6:	8f 87       	std	Y+15, r24	; 0x0f
		Print_String(duty,2);
 6f8:	62 e0       	ldi	r22, 0x02	; 2
 6fa:	ce 01       	movw	r24, r28
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	0e 94 ce 02 	call	0x59c	; 0x59c <Print_String>
		Print_String(freq,3);
 702:	63 e0       	ldi	r22, 0x03	; 3
 704:	ce 01       	movw	r24, r28
 706:	43 96       	adiw	r24, 0x13	; 19
 708:	0e 94 ce 02 	call	0x59c	; 0x59c <Print_String>
		
		SELECTFIRST();
 70c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SELECTFIRST>
		GLCD_Command(0x40);		/* Set Y address (column=0) */
 710:	80 e4       	ldi	r24, 0x40	; 64
 712:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		GLCD_Command(0xB8+5);
 716:	8d eb       	ldi	r24, 0xBD	; 189
 718:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
		
		
		int x = pwmvalue/timefactor;
 71c:	c4 01       	movw	r24, r8
 71e:	b8 01       	movw	r22, r16
 720:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__divmodhi4>
 724:	5b 01       	movw	r10, r22
		int k = 0;
		int nextk = 256/timefactor;
		for (int i = 0 ;i<128;i++)
 726:	00 e0       	ldi	r16, 0x00	; 0
 728:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_Command(0xB8+5);
		
		
		int x = pwmvalue/timefactor;
		int k = 0;
		int nextk = 256/timefactor;
 72a:	0f 2e       	mov	r0, r31
 72c:	f9 e1       	ldi	r31, 0x19	; 25
 72e:	ef 2e       	mov	r14, r31
 730:	f1 2c       	mov	r15, r1
 732:	f0 2d       	mov	r31, r0
		GLCD_Command(0x40);		/* Set Y address (column=0) */
		GLCD_Command(0xB8+5);
		
		
		int x = pwmvalue/timefactor;
		int k = 0;
 734:	c1 2c       	mov	r12, r1
 736:	d1 2c       	mov	r13, r1
		int nextk = 256/timefactor;
		for (int i = 0 ;i<128;i++)
 738:	2c c0       	rjmp	.+88     	; 0x792 <main+0x132>
		{
			if (64==i) {
 73a:	00 34       	cpi	r16, 0x40	; 64
 73c:	11 05       	cpc	r17, r1
 73e:	41 f4       	brne	.+16     	; 0x750 <main+0xf0>
				SELECTSECOND();
 740:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SELECTSECOND>
				GLCD_Command(0x40);		/* Set Y address (column=0) */
 744:	80 e4       	ldi	r24, 0x40	; 64
 746:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
				GLCD_Command(0xB8+5);
 74a:	8d eb       	ldi	r24, 0xBD	; 189
 74c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GLCD_Command>
			}
			if (i == nextk)
 750:	e0 16       	cp	r14, r16
 752:	f1 06       	cpc	r15, r17
 754:	41 f4       	brne	.+16     	; 0x766 <main+0x106>
			{
				GLCD_Data(CHANGEVOLT);
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_Data>
				k = nextk;
 75c:	67 01       	movw	r12, r14
				nextk = 256/timefactor+i;
 75e:	c8 01       	movw	r24, r16
 760:	49 96       	adiw	r24, 0x19	; 25
 762:	7c 01       	movw	r14, r24
 764:	14 c0       	rjmp	.+40     	; 0x78e <main+0x12e>
				
			}
			else if (i == x +k )
 766:	c6 01       	movw	r24, r12
 768:	8a 0d       	add	r24, r10
 76a:	9b 1d       	adc	r25, r11
 76c:	08 17       	cp	r16, r24
 76e:	19 07       	cpc	r17, r25
 770:	21 f4       	brne	.+8      	; 0x77a <main+0x11a>
			{
				GLCD_Data(CHANGEVOLT);
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_Data>
 778:	0a c0       	rjmp	.+20     	; 0x78e <main+0x12e>
			}
			
			else if(i > x+k)
 77a:	80 17       	cp	r24, r16
 77c:	91 07       	cpc	r25, r17
 77e:	24 f4       	brge	.+8      	; 0x788 <main+0x128>
			{
				GLCD_Data(LOWVOLT);
 780:	80 e8       	ldi	r24, 0x80	; 128
 782:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_Data>
 786:	03 c0       	rjmp	.+6      	; 0x78e <main+0x12e>
			}
			else {
				GLCD_Data(HIGHVOLT);
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	0e 94 1a 02 	call	0x434	; 0x434 <GLCD_Data>
		
		
		int x = pwmvalue/timefactor;
		int k = 0;
		int nextk = 256/timefactor;
		for (int i = 0 ;i<128;i++)
 78e:	0f 5f       	subi	r16, 0xFF	; 255
 790:	1f 4f       	sbci	r17, 0xFF	; 255
 792:	00 38       	cpi	r16, 0x80	; 128
 794:	11 05       	cpc	r17, r1
 796:	8c f2       	brlt	.-94     	; 0x73a <main+0xda>
			else {
				GLCD_Data(HIGHVOLT);
			}
	
		}
		pwmvalue += 10;
 798:	9a e0       	ldi	r25, 0x0A	; 10
 79a:	89 0e       	add	r8, r25
 79c:	91 1c       	adc	r9, r1
		if (pwmvalue >255)pwmvalue = 0;
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	82 16       	cp	r8, r18
 7a2:	91 04       	cpc	r9, r1
 7a4:	19 f0       	breq	.+6      	; 0x7ac <main+0x14c>
 7a6:	14 f0       	brlt	.+4      	; 0x7ac <main+0x14c>
 7a8:	81 2c       	mov	r8, r1
 7aa:	91 2c       	mov	r9, r1
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	90 e7       	ldi	r25, 0x70	; 112
 7b0:	22 e0       	ldi	r18, 0x02	; 2
 7b2:	81 50       	subi	r24, 0x01	; 1
 7b4:	90 40       	sbci	r25, 0x00	; 0
 7b6:	20 40       	sbci	r18, 0x00	; 0
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0x152>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0x15c>
 7bc:	00 00       	nop
 7be:	77 cf       	rjmp	.-274    	; 0x6ae <main+0x4e>

000007c0 <__divmodhi4>:
 7c0:	97 fb       	bst	r25, 7
 7c2:	07 2e       	mov	r0, r23
 7c4:	16 f4       	brtc	.+4      	; 0x7ca <__divmodhi4+0xa>
 7c6:	00 94       	com	r0
 7c8:	07 d0       	rcall	.+14     	; 0x7d8 <__divmodhi4_neg1>
 7ca:	77 fd       	sbrc	r23, 7
 7cc:	09 d0       	rcall	.+18     	; 0x7e0 <__divmodhi4_neg2>
 7ce:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__udivmodhi4>
 7d2:	07 fc       	sbrc	r0, 7
 7d4:	05 d0       	rcall	.+10     	; 0x7e0 <__divmodhi4_neg2>
 7d6:	3e f4       	brtc	.+14     	; 0x7e6 <__divmodhi4_exit>

000007d8 <__divmodhi4_neg1>:
 7d8:	90 95       	com	r25
 7da:	81 95       	neg	r24
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	08 95       	ret

000007e0 <__divmodhi4_neg2>:
 7e0:	70 95       	com	r23
 7e2:	61 95       	neg	r22
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255

000007e6 <__divmodhi4_exit>:
 7e6:	08 95       	ret

000007e8 <__udivmodhi4>:
 7e8:	aa 1b       	sub	r26, r26
 7ea:	bb 1b       	sub	r27, r27
 7ec:	51 e1       	ldi	r21, 0x11	; 17
 7ee:	07 c0       	rjmp	.+14     	; 0x7fe <__udivmodhi4_ep>

000007f0 <__udivmodhi4_loop>:
 7f0:	aa 1f       	adc	r26, r26
 7f2:	bb 1f       	adc	r27, r27
 7f4:	a6 17       	cp	r26, r22
 7f6:	b7 07       	cpc	r27, r23
 7f8:	10 f0       	brcs	.+4      	; 0x7fe <__udivmodhi4_ep>
 7fa:	a6 1b       	sub	r26, r22
 7fc:	b7 0b       	sbc	r27, r23

000007fe <__udivmodhi4_ep>:
 7fe:	88 1f       	adc	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	5a 95       	dec	r21
 804:	a9 f7       	brne	.-22     	; 0x7f0 <__udivmodhi4_loop>
 806:	80 95       	com	r24
 808:	90 95       	com	r25
 80a:	bc 01       	movw	r22, r24
 80c:	cd 01       	movw	r24, r26
 80e:	08 95       	ret

00000810 <_exit>:
 810:	f8 94       	cli

00000812 <__stop_program>:
 812:	ff cf       	rjmp	.-2      	; 0x812 <__stop_program>
