
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000314  00800060  000007f6  0000086a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000145a  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5b  00000000  00000000  00002126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c0  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00003544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053e  00000000  00000000  0000375c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a46  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000046e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 21 03 	call	0x642	; 0x642 <main>
  7a:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_InitChannel>:
    {
        Data |= (Dio_ReadChannel(ChannelIds[i]) << i);
    }
    
    return Data;
}
  82:	80 32       	cpi	r24, 0x20	; 32
  84:	08 f0       	brcs	.+2      	; 0x88 <Dio_InitChannel+0x6>
  86:	a5 c0       	rjmp	.+330    	; 0x1d2 <Dio_InitChannel+0x150>
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	fc 01       	movw	r30, r24
  8e:	ee 0f       	add	r30, r30
  90:	ff 1f       	adc	r31, r31
  92:	e4 58       	subi	r30, 0x84	; 132
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	20 81       	ld	r18, Z
  98:	21 30       	cpi	r18, 0x01	; 1
  9a:	69 f1       	breq	.+90     	; 0xf6 <Dio_InitChannel+0x74>
  9c:	38 f0       	brcs	.+14     	; 0xac <Dio_InitChannel+0x2a>
  9e:	22 30       	cpi	r18, 0x02	; 2
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_InitChannel+0x22>
  a2:	4e c0       	rjmp	.+156    	; 0x140 <Dio_InitChannel+0xbe>
  a4:	23 30       	cpi	r18, 0x03	; 3
  a6:	09 f4       	brne	.+2      	; 0xaa <Dio_InitChannel+0x28>
  a8:	70 c0       	rjmp	.+224    	; 0x18a <Dio_InitChannel+0x108>
  aa:	08 95       	ret
  ac:	61 30       	cpi	r22, 0x01	; 1
  ae:	89 f4       	brne	.+34     	; 0xd2 <Dio_InitChannel+0x50>
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	fc 01       	movw	r30, r24
  b8:	e4 58       	subi	r30, 0x84	; 132
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 80       	ldd	r0, Z+1	; 0x01
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <Dio_InitChannel+0x46>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <Dio_InitChannel+0x42>
  cc:	82 2b       	or	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	fc 01       	movw	r30, r24
  da:	e4 58       	subi	r30, 0x84	; 132
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 80       	ldd	r0, Z+1	; 0x01
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_InitChannel+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_InitChannel+0x64>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	08 95       	ret
  f6:	61 30       	cpi	r22, 0x01	; 1
  f8:	89 f4       	brne	.+34     	; 0x11c <Dio_InitChannel+0x9a>
  fa:	27 b3       	in	r18, 0x17	; 23
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	fc 01       	movw	r30, r24
 102:	e4 58       	subi	r30, 0x84	; 132
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 80       	ldd	r0, Z+1	; 0x01
 10c:	02 c0       	rjmp	.+4      	; 0x112 <Dio_InitChannel+0x90>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <Dio_InitChannel+0x8c>
 116:	82 2b       	or	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	fc 01       	movw	r30, r24
 124:	e4 58       	subi	r30, 0x84	; 132
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 80       	ldd	r0, Z+1	; 0x01
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Dio_InitChannel+0xb2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <Dio_InitChannel+0xae>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret
 140:	61 30       	cpi	r22, 0x01	; 1
 142:	89 f4       	brne	.+34     	; 0x166 <Dio_InitChannel+0xe4>
 144:	24 b3       	in	r18, 0x14	; 20
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	fc 01       	movw	r30, r24
 14c:	e4 58       	subi	r30, 0x84	; 132
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 80       	ldd	r0, Z+1	; 0x01
 156:	02 c0       	rjmp	.+4      	; 0x15c <Dio_InitChannel+0xda>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <Dio_InitChannel+0xd6>
 160:	82 2b       	or	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	24 b3       	in	r18, 0x14	; 20
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	fc 01       	movw	r30, r24
 16e:	e4 58       	subi	r30, 0x84	; 132
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 80       	ldd	r0, Z+1	; 0x01
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_InitChannel+0xfc>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_InitChannel+0xf8>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	84 bb       	out	0x14, r24	; 20
 188:	08 95       	ret
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	89 f4       	brne	.+34     	; 0x1b0 <Dio_InitChannel+0x12e>
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	fc 01       	movw	r30, r24
 196:	e4 58       	subi	r30, 0x84	; 132
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 80       	ldd	r0, Z+1	; 0x01
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_InitChannel+0x124>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_InitChannel+0x120>
 1aa:	82 2b       	or	r24, r18
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret
 1b0:	21 b3       	in	r18, 0x11	; 17
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	fc 01       	movw	r30, r24
 1b8:	e4 58       	subi	r30, 0x84	; 132
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 80       	ldd	r0, Z+1	; 0x01
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Dio_InitChannel+0x146>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <Dio_InitChannel+0x142>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret

000001d4 <Dio_WriteChannel>:
 1d4:	80 32       	cpi	r24, 0x20	; 32
 1d6:	08 f0       	brcs	.+2      	; 0x1da <Dio_WriteChannel+0x6>
 1d8:	a5 c0       	rjmp	.+330    	; 0x324 <Dio_WriteChannel+0x150>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e4 58       	subi	r30, 0x84	; 132
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	20 81       	ld	r18, Z
 1ea:	21 30       	cpi	r18, 0x01	; 1
 1ec:	69 f1       	breq	.+90     	; 0x248 <Dio_WriteChannel+0x74>
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <Dio_WriteChannel+0x2a>
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <Dio_WriteChannel+0x22>
 1f4:	4e c0       	rjmp	.+156    	; 0x292 <Dio_WriteChannel+0xbe>
 1f6:	23 30       	cpi	r18, 0x03	; 3
 1f8:	09 f4       	brne	.+2      	; 0x1fc <Dio_WriteChannel+0x28>
 1fa:	70 c0       	rjmp	.+224    	; 0x2dc <Dio_WriteChannel+0x108>
 1fc:	08 95       	ret
 1fe:	61 30       	cpi	r22, 0x01	; 1
 200:	89 f4       	brne	.+34     	; 0x224 <Dio_WriteChannel+0x50>
 202:	2b b3       	in	r18, 0x1b	; 27
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	fc 01       	movw	r30, r24
 20a:	e4 58       	subi	r30, 0x84	; 132
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	01 80       	ldd	r0, Z+1	; 0x01
 214:	02 c0       	rjmp	.+4      	; 0x21a <Dio_WriteChannel+0x46>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <Dio_WriteChannel+0x42>
 21e:	82 2b       	or	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	fc 01       	movw	r30, r24
 22c:	e4 58       	subi	r30, 0x84	; 132
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 80       	ldd	r0, Z+1	; 0x01
 236:	02 c0       	rjmp	.+4      	; 0x23c <Dio_WriteChannel+0x68>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <Dio_WriteChannel+0x64>
 240:	80 95       	com	r24
 242:	82 23       	and	r24, r18
 244:	8b bb       	out	0x1b, r24	; 27
 246:	08 95       	ret
 248:	61 30       	cpi	r22, 0x01	; 1
 24a:	89 f4       	brne	.+34     	; 0x26e <Dio_WriteChannel+0x9a>
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	fc 01       	movw	r30, r24
 254:	e4 58       	subi	r30, 0x84	; 132
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 80       	ldd	r0, Z+1	; 0x01
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Dio_WriteChannel+0x90>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <Dio_WriteChannel+0x8c>
 268:	82 2b       	or	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	08 95       	ret
 26e:	28 b3       	in	r18, 0x18	; 24
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	fc 01       	movw	r30, r24
 276:	e4 58       	subi	r30, 0x84	; 132
 278:	ff 4f       	sbci	r31, 0xFF	; 255
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 80       	ldd	r0, Z+1	; 0x01
 280:	02 c0       	rjmp	.+4      	; 0x286 <Dio_WriteChannel+0xb2>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <Dio_WriteChannel+0xae>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	88 bb       	out	0x18, r24	; 24
 290:	08 95       	ret
 292:	61 30       	cpi	r22, 0x01	; 1
 294:	89 f4       	brne	.+34     	; 0x2b8 <Dio_WriteChannel+0xe4>
 296:	25 b3       	in	r18, 0x15	; 21
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	fc 01       	movw	r30, r24
 29e:	e4 58       	subi	r30, 0x84	; 132
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	01 80       	ldd	r0, Z+1	; 0x01
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Dio_WriteChannel+0xda>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Dio_WriteChannel+0xd6>
 2b2:	82 2b       	or	r24, r18
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	08 95       	ret
 2b8:	25 b3       	in	r18, 0x15	; 21
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	fc 01       	movw	r30, r24
 2c0:	e4 58       	subi	r30, 0x84	; 132
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	01 80       	ldd	r0, Z+1	; 0x01
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <Dio_WriteChannel+0xfc>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <Dio_WriteChannel+0xf8>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	08 95       	ret
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	89 f4       	brne	.+34     	; 0x302 <Dio_WriteChannel+0x12e>
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	fc 01       	movw	r30, r24
 2e8:	e4 58       	subi	r30, 0x84	; 132
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 80       	ldd	r0, Z+1	; 0x01
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <Dio_WriteChannel+0x124>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <Dio_WriteChannel+0x120>
 2fc:	82 2b       	or	r24, r18
 2fe:	82 bb       	out	0x12, r24	; 18
 300:	08 95       	ret
 302:	22 b3       	in	r18, 0x12	; 18
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	fc 01       	movw	r30, r24
 30a:	e4 58       	subi	r30, 0x84	; 132
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 80       	ldd	r0, Z+1	; 0x01
 314:	02 c0       	rjmp	.+4      	; 0x31a <Dio_WriteChannel+0x146>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Dio_WriteChannel+0x142>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	82 bb       	out	0x12, r24	; 18
 324:	08 95       	ret

00000326 <Dio_WriteChannelGroup>:
 326:	ef 92       	push	r14
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	8c 01       	movw	r16, r24
 334:	f6 2e       	mov	r15, r22
 336:	e4 2e       	mov	r14, r20
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	19 c0       	rjmp	.+50     	; 0x370 <Dio_WriteChannelGroup+0x4a>
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	0c 2e       	mov	r0, r28
 344:	02 c0       	rjmp	.+4      	; 0x34a <Dio_WriteChannelGroup+0x24>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <Dio_WriteChannelGroup+0x20>
 34e:	8e 2d       	mov	r24, r14
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	68 23       	and	r22, r24
 354:	79 23       	and	r23, r25
 356:	0c 2e       	mov	r0, r28
 358:	02 c0       	rjmp	.+4      	; 0x35e <Dio_WriteChannelGroup+0x38>
 35a:	76 95       	lsr	r23
 35c:	67 95       	ror	r22
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <Dio_WriteChannelGroup+0x34>
 362:	f8 01       	movw	r30, r16
 364:	ec 0f       	add	r30, r28
 366:	fd 1f       	adc	r31, r29
 368:	80 81       	ld	r24, Z
 36a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 36e:	21 96       	adiw	r28, 0x01	; 1
 370:	8f 2d       	mov	r24, r15
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	c8 17       	cp	r28, r24
 376:	d9 07       	cpc	r29, r25
 378:	14 f3       	brlt	.-60     	; 0x33e <Dio_WriteChannelGroup+0x18>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	08 95       	ret

00000388 <Dio_InitChannelGroup>:
 * Note:
 *   - This function should be called during the initialization phase of the software.
 *   - Ensure proper initialization of Dio_ChannelConfig array before calling this function.
 **************************************************************/
void Dio_InitChannelGroup(uint8_t* ChannelIds, uint8_t Size, Dio_DirectionType* Directions)
{
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	7c 01       	movw	r14, r24
 398:	d6 2e       	mov	r13, r22
 39a:	8a 01       	movw	r16, r20
    for (int i = 0; i < Size; i++)
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
 3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <Dio_InitChannelGroup+0x30>
    {
        Dio_InitChannel(ChannelIds[i], Directions[i]);
 3a2:	d8 01       	movw	r26, r16
 3a4:	ac 0f       	add	r26, r28
 3a6:	bd 1f       	adc	r27, r29
 3a8:	f7 01       	movw	r30, r14
 3aa:	ec 0f       	add	r30, r28
 3ac:	fd 1f       	adc	r31, r29
 3ae:	6c 91       	ld	r22, X
 3b0:	80 81       	ld	r24, Z
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_InitChannel>
 *   - This function should be called during the initialization phase of the software.
 *   - Ensure proper initialization of Dio_ChannelConfig array before calling this function.
 **************************************************************/
void Dio_InitChannelGroup(uint8_t* ChannelIds, uint8_t Size, Dio_DirectionType* Directions)
{
    for (int i = 0; i < Size; i++)
 3b6:	21 96       	adiw	r28, 0x01	; 1
 3b8:	8d 2d       	mov	r24, r13
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	c8 17       	cp	r28, r24
 3be:	d9 07       	cpc	r29, r25
 3c0:	84 f3       	brlt	.-32     	; 0x3a2 <Dio_InitChannelGroup+0x1a>
    {
        Dio_InitChannel(ChannelIds[i], Directions[i]);
    }
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	08 95       	ret

000003d2 <SELECTBOTH>:

#include "Dio.h"
#include "GLCD_cfg.h"
#include "GLCD.h"

void SELECTBOTH()   { Dio_WriteChannel(CS1, DIO_LOW); Dio_WriteChannel(CS2, DIO_LOW); }
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	8d e0       	ldi	r24, 0x0D	; 13
 3de:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 3e2:	08 95       	ret

000003e4 <SELECTFIRST>:

void SELECTFIRST()  { Dio_WriteChannel(CS1, DIO_LOW); Dio_WriteChannel(CS2, DIO_HIGH); }
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	8d e0       	ldi	r24, 0x0D	; 13
 3f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 3f4:	08 95       	ret

000003f6 <SELECTSECOND>:

void SELECTSECOND() { Dio_WriteChannel(CS1, DIO_HIGH); Dio_WriteChannel(CS2, DIO_LOW); }
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	8c e0       	ldi	r24, 0x0C	; 12
 3fa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 406:	08 95       	ret

00000408 <GLCD_Command>:



void GLCD_Command(char Command)
{
	Dio_WriteChannelGroup(dataPort, 8, Command);    /* Copy command on data Pin */
 408:	48 2f       	mov	r20, r24
 40a:	68 e0       	ldi	r22, 0x08	; 8
 40c:	86 e6       	ldi	r24, 0x66	; 102
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 93 01 	call	0x326	; 0x326 <Dio_WriteChannelGroup>
	Dio_WriteChannel(RS, DIO_LOW);                  /* Make RS LOW for command register */
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	89 e0       	ldi	r24, 0x09	; 9
 418:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
	Dio_WriteChannel(RW, DIO_LOW);                  /* Make RW LOW for write operation */
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
	Dio_WriteChannel(EN, DIO_HIGH);                 /* Make HIGH-LOW transition on Enable */
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	8b e0       	ldi	r24, 0x0B	; 11
 428:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	8a 95       	dec	r24
 430:	f1 f7       	brne	.-4      	; 0x42e <GLCD_Command+0x26>
 432:	00 00       	nop
	_delay_us(5);
	Dio_WriteChannel(EN, DIO_LOW);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	8b e0       	ldi	r24, 0x0B	; 11
 438:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 43c:	8d e0       	ldi	r24, 0x0D	; 13
 43e:	8a 95       	dec	r24
 440:	f1 f7       	brne	.-4      	; 0x43e <GLCD_Command+0x36>
 442:	00 00       	nop
 444:	08 95       	ret

00000446 <GLCD_Data>:
}


void GLCD_Data(char Data)
{
	Dio_WriteChannelGroup(dataPort, 8, Data);   /* Copy data on data Pin */
 446:	48 2f       	mov	r20, r24
 448:	68 e0       	ldi	r22, 0x08	; 8
 44a:	86 e6       	ldi	r24, 0x66	; 102
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 93 01 	call	0x326	; 0x326 <Dio_WriteChannelGroup>
	Dio_WriteChannel(RS, DIO_HIGH);             /* Make RS HIGH for data register */
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	89 e0       	ldi	r24, 0x09	; 9
 456:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
	Dio_WriteChannel(RW, DIO_LOW);              /* Make RW LOW for write operation */
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	8a e0       	ldi	r24, 0x0A	; 10
 45e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
	Dio_WriteChannel(EN, DIO_HIGH);             /* Make HIGH-LOW transition on Enable */
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 46a:	8d e0       	ldi	r24, 0x0D	; 13
 46c:	8a 95       	dec	r24
 46e:	f1 f7       	brne	.-4      	; 0x46c <GLCD_Data+0x26>
 470:	00 00       	nop
	_delay_us(5);
	Dio_WriteChannel(EN, DIO_LOW);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	8b e0       	ldi	r24, 0x0B	; 11
 476:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
 47a:	8d e0       	ldi	r24, 0x0D	; 13
 47c:	8a 95       	dec	r24
 47e:	f1 f7       	brne	.-4      	; 0x47c <GLCD_Data+0x36>
 480:	00 00       	nop
 482:	08 95       	ret

00000484 <GLCD_Init>:
	_delay_us(5);
}


void GLCD_Init()
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	2e 97       	sbiw	r28, 0x0e	; 14
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
	Dio_DirectionType dataPortdir[] = {DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT};
 498:	88 e0       	ldi	r24, 0x08	; 8
 49a:	ee e6       	ldi	r30, 0x6E	; 110
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	de 01       	movw	r26, r28
 4a0:	11 96       	adiw	r26, 0x01	; 1
 4a2:	01 90       	ld	r0, Z+
 4a4:	0d 92       	st	X+, r0
 4a6:	8a 95       	dec	r24
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <GLCD_Init+0x1e>
	Dio_InitChannelGroup(dataPort, 8, dataPortdir);
 4aa:	ae 01       	movw	r20, r28
 4ac:	4f 5f       	subi	r20, 0xFF	; 255
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255
 4b0:	68 e0       	ldi	r22, 0x08	; 8
 4b2:	86 e6       	ldi	r24, 0x66	; 102
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 c4 01 	call	0x388	; 0x388 <Dio_InitChannelGroup>

	Dio_DirectionType cmddir[] = {DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT};
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	e6 e7       	ldi	r30, 0x76	; 118
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	de 01       	movw	r26, r28
 4c2:	19 96       	adiw	r26, 0x09	; 9
 4c4:	01 90       	ld	r0, Z+
 4c6:	0d 92       	st	X+, r0
 4c8:	8a 95       	dec	r24
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <GLCD_Init+0x40>
	Dio_InitChannelGroup(cmd, 6, cmddir);
 4cc:	ae 01       	movw	r20, r28
 4ce:	47 5f       	subi	r20, 0xF7	; 247
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	66 e0       	ldi	r22, 0x06	; 6
 4d4:	80 e6       	ldi	r24, 0x60	; 96
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 c4 01 	call	0x388	; 0x388 <Dio_InitChannelGroup>

	/* Select both left & right half of display & Keep reset Pin high */
	SELECTBOTH();
 4dc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SELECTBOTH>
	Dio_WriteChannel(RST, DIO_HIGH);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	8e e0       	ldi	r24, 0x0E	; 14
 4e4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e8:	8f e3       	ldi	r24, 0x3F	; 63
 4ea:	9c e9       	ldi	r25, 0x9C	; 156
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <GLCD_Init+0x68>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <GLCD_Init+0x6e>
 4f2:	00 00       	nop

	_delay_ms(20);
	GLCD_Command(0x3E); /* Display OFF */
 4f4:	8e e3       	ldi	r24, 0x3E	; 62
 4f6:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
	GLCD_Command(0x40); /* Set Y address (column=0) */
 4fa:	80 e4       	ldi	r24, 0x40	; 64
 4fc:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
	GLCD_Command(0xB8); /* Set x address (page=0) */
 500:	88 eb       	ldi	r24, 0xB8	; 184
 502:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
	GLCD_Command(0xC0); /* Set z address (start line=0) */
 506:	80 ec       	ldi	r24, 0xC0	; 192
 508:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
	GLCD_Command(0x3F); /* Display ON */
 50c:	8f e3       	ldi	r24, 0x3F	; 63
 50e:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
}
 512:	2e 96       	adiw	r28, 0x0e	; 14
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <GLCD_PrintChar>:

void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	f8 2e       	mov	r15, r24
 532:	e6 2e       	mov	r14, r22
	int i = col ;
	for(i = col; i < 5+col; i++)
 534:	04 2f       	mov	r16, r20
 536:	10 e0       	ldi	r17, 0x00	; 0
 538:	e8 01       	movw	r28, r16
 53a:	21 c0       	rjmp	.+66     	; 0x57e <GLCD_PrintChar+0x5a>
	{
		if (64==i) {
 53c:	c0 34       	cpi	r28, 0x40	; 64
 53e:	d1 05       	cpc	r29, r1
 540:	49 f4       	brne	.+18     	; 0x554 <GLCD_PrintChar+0x30>
			SELECTSECOND();
 542:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SELECTSECOND>
			GLCD_Command(0x40);		/* Set Y address (column=0) */
 546:	80 e4       	ldi	r24, 0x40	; 64
 548:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
			GLCD_Command(0xB8+row);
 54c:	88 eb       	ldi	r24, 0xB8	; 184
 54e:	8e 0d       	add	r24, r14
 550:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		}
		GLCD_Data(font[x][i-col]);
 554:	8f 2d       	mov	r24, r15
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9e 01       	movw	r18, r28
 55a:	20 1b       	sub	r18, r16
 55c:	31 0b       	sbc	r19, r17
 55e:	ac 01       	movw	r20, r24
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	44 0f       	add	r20, r20
 566:	55 1f       	adc	r21, r21
 568:	84 0f       	add	r24, r20
 56a:	95 1f       	adc	r25, r21
 56c:	84 54       	subi	r24, 0x44	; 68
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	fc 01       	movw	r30, r24
 572:	e2 0f       	add	r30, r18
 574:	f3 1f       	adc	r31, r19
 576:	80 81       	ld	r24, Z
 578:	0e 94 23 02 	call	0x446	; 0x446 <GLCD_Data>
}

void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
	int i = col ;
	for(i = col; i < 5+col; i++)
 57c:	21 96       	adiw	r28, 0x01	; 1
 57e:	c8 01       	movw	r24, r16
 580:	05 96       	adiw	r24, 0x05	; 5
 582:	c8 17       	cp	r28, r24
 584:	d9 07       	cpc	r29, r25
 586:	d4 f2       	brlt	.-76     	; 0x53c <GLCD_PrintChar+0x18>
			GLCD_Command(0x40);		/* Set Y address (column=0) */
			GLCD_Command(0xB8+row);
		}
		GLCD_Data(font[x][i-col]);
	}
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	08 95       	ret

00000596 <Print_String>:
void Print_String(char* x,uint8_t row)
{
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ff 92       	push	r15
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	6c 01       	movw	r12, r24
 5a6:	f6 2e       	mov	r15, r22
	int i = 0,col =0;
	SELECTFIRST();
 5a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SELECTFIRST>
	GLCD_Command(0x40);
 5ac:	80 e4       	ldi	r24, 0x40	; 64
 5ae:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
	GLCD_Command((0xB8) + row);
 5b2:	88 eb       	ldi	r24, 0xB8	; 184
 5b4:	8f 0d       	add	r24, r15
 5b6:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		GLCD_Data(font[x][i-col]);
	}
}
void Print_String(char* x,uint8_t row)
{
	int i = 0,col =0;
 5ba:	00 e0       	ldi	r16, 0x00	; 0
 5bc:	10 e0       	ldi	r17, 0x00	; 0
 5be:	c0 e0       	ldi	r28, 0x00	; 0
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
	SELECTFIRST();
	GLCD_Command(0x40);
	GLCD_Command((0xB8) + row);
	
	while (x[i])
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <Print_String+0x3c>
	{
		GLCD_PrintChar(x[i],row,col);
 5c4:	40 2f       	mov	r20, r16
 5c6:	6f 2d       	mov	r22, r15
 5c8:	0e 94 92 02 	call	0x524	; 0x524 <GLCD_PrintChar>
		i++; col+=5;
 5cc:	21 96       	adiw	r28, 0x01	; 1
 5ce:	0b 5f       	subi	r16, 0xFB	; 251
 5d0:	1f 4f       	sbci	r17, 0xFF	; 255
	int i = 0,col =0;
	SELECTFIRST();
	GLCD_Command(0x40);
	GLCD_Command((0xB8) + row);
	
	while (x[i])
 5d2:	f6 01       	movw	r30, r12
 5d4:	ec 0f       	add	r30, r28
 5d6:	fd 1f       	adc	r31, r29
 5d8:	80 81       	ld	r24, Z
 5da:	81 11       	cpse	r24, r1
 5dc:	f3 cf       	rjmp	.-26     	; 0x5c4 <Print_String+0x2e>
	{
		GLCD_PrintChar(x[i],row,col);
		i++; col+=5;
	}
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	df 90       	pop	r13
 5ea:	cf 90       	pop	r12
 5ec:	08 95       	ret

000005ee <GLCD_ClearAll>:
void GLCD_ClearAll()			/* GLCD all display clear function */
{
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
	int i,j;

	SELECTBOTH();
 5f6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SELECTBOTH>
	for(i = 0; i < 8; i++)
 5fa:	00 e0       	ldi	r16, 0x00	; 0
 5fc:	10 e0       	ldi	r17, 0x00	; 0
 5fe:	13 c0       	rjmp	.+38     	; 0x626 <GLCD_ClearAll+0x38>
	{
		
		GLCD_Command(0x40);
 600:	80 e4       	ldi	r24, 0x40	; 64
 602:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		GLCD_Command((0xB8) + i);
 606:	88 eb       	ldi	r24, 0xB8	; 184
 608:	80 0f       	add	r24, r16
 60a:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>

		for(j = 0; j < 64 ; j++)
 60e:	c0 e0       	ldi	r28, 0x00	; 0
 610:	d0 e0       	ldi	r29, 0x00	; 0
 612:	04 c0       	rjmp	.+8      	; 0x61c <GLCD_ClearAll+0x2e>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 23 02 	call	0x446	; 0x446 <GLCD_Data>
	{
		
		GLCD_Command(0x40);
		GLCD_Command((0xB8) + i);

		for(j = 0; j < 64 ; j++)
 61a:	21 96       	adiw	r28, 0x01	; 1
 61c:	c0 34       	cpi	r28, 0x40	; 64
 61e:	d1 05       	cpc	r29, r1
 620:	cc f3       	brlt	.-14     	; 0x614 <GLCD_ClearAll+0x26>
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;

	SELECTBOTH();
	for(i = 0; i < 8; i++)
 622:	0f 5f       	subi	r16, 0xFF	; 255
 624:	1f 4f       	sbci	r17, 0xFF	; 255
 626:	08 30       	cpi	r16, 0x08	; 8
 628:	11 05       	cpc	r17, r1
 62a:	54 f3       	brlt	.-44     	; 0x600 <GLCD_ClearAll+0x12>
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
			//delay_us(5000);
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 62c:	80 e4       	ldi	r24, 0x40	; 64
 62e:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 632:	88 eb       	ldi	r24, 0xB8	; 184
 634:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>


}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	08 95       	ret

00000642 <main>:




int main(void)
{
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	cd b7       	in	r28, 0x3d	; 61
 648:	de b7       	in	r29, 0x3e	; 62
 64a:	a6 97       	sbiw	r28, 0x26	; 38
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
	GLCD_Init();
 656:	0e 94 42 02 	call	0x484	; 0x484 <GLCD_Init>
	GLCD_ClearAll();
 65a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <GLCD_ClearAll>
	Print_String("PWM Signal ",1);
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	81 e4       	ldi	r24, 0x41	; 65
 662:	93 e0       	ldi	r25, 0x03	; 3
 664:	0e 94 cb 02 	call	0x596	; 0x596 <Print_String>

	int pwmvalue = 0;
	int timefactor = 10;
	char duty[] = "Duty Cycle = 00 %";
 668:	82 e1       	ldi	r24, 0x12	; 18
 66a:	ed e4       	ldi	r30, 0x4D	; 77
 66c:	f3 e0       	ldi	r31, 0x03	; 3
 66e:	de 01       	movw	r26, r28
 670:	11 96       	adiw	r26, 0x01	; 1
 672:	01 90       	ld	r0, Z+
 674:	0d 92       	st	X+, r0
 676:	8a 95       	dec	r24
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x30>
	char freq[] = "frequency =	320 KHZ";
 67a:	84 e1       	ldi	r24, 0x14	; 20
 67c:	ef e5       	ldi	r30, 0x5F	; 95
 67e:	f3 e0       	ldi	r31, 0x03	; 3
 680:	de 01       	movw	r26, r28
 682:	53 96       	adiw	r26, 0x13	; 19
 684:	01 90       	ld	r0, Z+
 686:	0d 92       	st	X+, r0
 688:	8a 95       	dec	r24
 68a:	e1 f7       	brne	.-8      	; 0x684 <main+0x42>
{
	GLCD_Init();
	GLCD_ClearAll();
	Print_String("PWM Signal ",1);

	int pwmvalue = 0;
 68c:	81 2c       	mov	r8, r1
 68e:	91 2c       	mov	r9, r1
	int timefactor = 10;
	char duty[] = "Duty Cycle = 00 %";
	char freq[] = "frequency =	320 KHZ";
	while(1)
	{
		SELECTFIRST();
 690:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SELECTFIRST>
		GLCD_Command(0x40);		/* Set Y address (column=0) */
 694:	80 e4       	ldi	r24, 0x40	; 64
 696:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		GLCD_Command(0xB8+2);		/* Set x address (page=0) */
 69a:	8a eb       	ldi	r24, 0xBA	; 186
 69c:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		int dc = pwmvalue*100/256;
 6a0:	24 e6       	ldi	r18, 0x64	; 100
 6a2:	28 9d       	mul	r18, r8
 6a4:	c0 01       	movw	r24, r0
 6a6:	29 9d       	mul	r18, r9
 6a8:	90 0d       	add	r25, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	9c 01       	movw	r18, r24
 6ae:	99 23       	and	r25, r25
 6b0:	14 f4       	brge	.+4      	; 0x6b6 <main+0x74>
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	3f 4f       	sbci	r19, 0xFF	; 255
 6b6:	23 2f       	mov	r18, r19
 6b8:	22 0f       	add	r18, r18
 6ba:	22 0b       	sbc	r18, r18
		duty[13] = dc/10+'0';
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	7a e0       	ldi	r23, 0x0A	; 10
 6c0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divmodhi4>
 6c4:	60 5d       	subi	r22, 0xD0	; 208
 6c6:	6e 87       	std	Y+14, r22	; 0x0e
		duty[14] = dc%10+'0';
 6c8:	0a e0       	ldi	r16, 0x0A	; 10
 6ca:	10 e0       	ldi	r17, 0x00	; 0
 6cc:	83 2f       	mov	r24, r19
 6ce:	92 2f       	mov	r25, r18
 6d0:	b8 01       	movw	r22, r16
 6d2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divmodhi4>
 6d6:	80 5d       	subi	r24, 0xD0	; 208
 6d8:	8f 87       	std	Y+15, r24	; 0x0f
		Print_String(duty,2);
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	ce 01       	movw	r24, r28
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	0e 94 cb 02 	call	0x596	; 0x596 <Print_String>
		Print_String(freq,3);
 6e4:	63 e0       	ldi	r22, 0x03	; 3
 6e6:	ce 01       	movw	r24, r28
 6e8:	43 96       	adiw	r24, 0x13	; 19
 6ea:	0e 94 cb 02 	call	0x596	; 0x596 <Print_String>
		
		SELECTFIRST();
 6ee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SELECTFIRST>
		GLCD_Command(0x40);		/* Set Y address (column=0) */
 6f2:	80 e4       	ldi	r24, 0x40	; 64
 6f4:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		GLCD_Command(0xB8+5);
 6f8:	8d eb       	ldi	r24, 0xBD	; 189
 6fa:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
		
		
		int x = pwmvalue/timefactor;
 6fe:	c4 01       	movw	r24, r8
 700:	b8 01       	movw	r22, r16
 702:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divmodhi4>
 706:	5b 01       	movw	r10, r22
		int k = 0;
		int nextk = 256/timefactor;
		for (int i = 0 ;i<128;i++)
 708:	00 e0       	ldi	r16, 0x00	; 0
 70a:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_Command(0xB8+5);
		
		
		int x = pwmvalue/timefactor;
		int k = 0;
		int nextk = 256/timefactor;
 70c:	0f 2e       	mov	r0, r31
 70e:	f9 e1       	ldi	r31, 0x19	; 25
 710:	ef 2e       	mov	r14, r31
 712:	f1 2c       	mov	r15, r1
 714:	f0 2d       	mov	r31, r0
		GLCD_Command(0x40);		/* Set Y address (column=0) */
		GLCD_Command(0xB8+5);
		
		
		int x = pwmvalue/timefactor;
		int k = 0;
 716:	c1 2c       	mov	r12, r1
 718:	d1 2c       	mov	r13, r1
		int nextk = 256/timefactor;
		for (int i = 0 ;i<128;i++)
 71a:	2c c0       	rjmp	.+88     	; 0x774 <main+0x132>
		{
			if (64==i) {
 71c:	00 34       	cpi	r16, 0x40	; 64
 71e:	11 05       	cpc	r17, r1
 720:	41 f4       	brne	.+16     	; 0x732 <main+0xf0>
				SELECTSECOND();
 722:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <SELECTSECOND>
				GLCD_Command(0x40);		/* Set Y address (column=0) */
 726:	80 e4       	ldi	r24, 0x40	; 64
 728:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
				GLCD_Command(0xB8+5);
 72c:	8d eb       	ldi	r24, 0xBD	; 189
 72e:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_Command>
			}
			if (i == nextk)
 732:	e0 16       	cp	r14, r16
 734:	f1 06       	cpc	r15, r17
 736:	41 f4       	brne	.+16     	; 0x748 <main+0x106>
			{
				GLCD_Data(CHANGEVOLT);
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	0e 94 23 02 	call	0x446	; 0x446 <GLCD_Data>
				k = nextk;
 73e:	67 01       	movw	r12, r14
				nextk = 256/timefactor+i;
 740:	c8 01       	movw	r24, r16
 742:	49 96       	adiw	r24, 0x19	; 25
 744:	7c 01       	movw	r14, r24
 746:	14 c0       	rjmp	.+40     	; 0x770 <main+0x12e>
				
			}
			else if (i == x +k )
 748:	c6 01       	movw	r24, r12
 74a:	8a 0d       	add	r24, r10
 74c:	9b 1d       	adc	r25, r11
 74e:	08 17       	cp	r16, r24
 750:	19 07       	cpc	r17, r25
 752:	21 f4       	brne	.+8      	; 0x75c <main+0x11a>
			{
				GLCD_Data(CHANGEVOLT);
 754:	8f ef       	ldi	r24, 0xFF	; 255
 756:	0e 94 23 02 	call	0x446	; 0x446 <GLCD_Data>
 75a:	0a c0       	rjmp	.+20     	; 0x770 <main+0x12e>
			}
			
			else if(i > x+k)
 75c:	80 17       	cp	r24, r16
 75e:	91 07       	cpc	r25, r17
 760:	24 f4       	brge	.+8      	; 0x76a <main+0x128>
			{
				GLCD_Data(LOWVOLT);
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	0e 94 23 02 	call	0x446	; 0x446 <GLCD_Data>
 768:	03 c0       	rjmp	.+6      	; 0x770 <main+0x12e>
			}
			else {
				GLCD_Data(HIGHVOLT);
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 23 02 	call	0x446	; 0x446 <GLCD_Data>
		
		
		int x = pwmvalue/timefactor;
		int k = 0;
		int nextk = 256/timefactor;
		for (int i = 0 ;i<128;i++)
 770:	0f 5f       	subi	r16, 0xFF	; 255
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	00 38       	cpi	r16, 0x80	; 128
 776:	11 05       	cpc	r17, r1
 778:	8c f2       	brlt	.-94     	; 0x71c <main+0xda>
			else {
				GLCD_Data(HIGHVOLT);
			}
	
		}
		pwmvalue += 10;
 77a:	9a e0       	ldi	r25, 0x0A	; 10
 77c:	89 0e       	add	r8, r25
 77e:	91 1c       	adc	r9, r1
		if (pwmvalue >255)pwmvalue = 0;
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	82 16       	cp	r8, r18
 784:	91 04       	cpc	r9, r1
 786:	19 f0       	breq	.+6      	; 0x78e <main+0x14c>
 788:	14 f0       	brlt	.+4      	; 0x78e <main+0x14c>
 78a:	81 2c       	mov	r8, r1
 78c:	91 2c       	mov	r9, r1
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	90 e7       	ldi	r25, 0x70	; 112
 792:	22 e0       	ldi	r18, 0x02	; 2
 794:	81 50       	subi	r24, 0x01	; 1
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	20 40       	sbci	r18, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x152>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x15c>
 79e:	00 00       	nop
 7a0:	77 cf       	rjmp	.-274    	; 0x690 <main+0x4e>

000007a2 <__divmodhi4>:
 7a2:	97 fb       	bst	r25, 7
 7a4:	07 2e       	mov	r0, r23
 7a6:	16 f4       	brtc	.+4      	; 0x7ac <__divmodhi4+0xa>
 7a8:	00 94       	com	r0
 7aa:	07 d0       	rcall	.+14     	; 0x7ba <__divmodhi4_neg1>
 7ac:	77 fd       	sbrc	r23, 7
 7ae:	09 d0       	rcall	.+18     	; 0x7c2 <__divmodhi4_neg2>
 7b0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__udivmodhi4>
 7b4:	07 fc       	sbrc	r0, 7
 7b6:	05 d0       	rcall	.+10     	; 0x7c2 <__divmodhi4_neg2>
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__divmodhi4_exit>

000007ba <__divmodhi4_neg1>:
 7ba:	90 95       	com	r25
 7bc:	81 95       	neg	r24
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	08 95       	ret

000007c2 <__divmodhi4_neg2>:
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255

000007c8 <__divmodhi4_exit>:
 7c8:	08 95       	ret

000007ca <__udivmodhi4>:
 7ca:	aa 1b       	sub	r26, r26
 7cc:	bb 1b       	sub	r27, r27
 7ce:	51 e1       	ldi	r21, 0x11	; 17
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <__udivmodhi4_ep>

000007d2 <__udivmodhi4_loop>:
 7d2:	aa 1f       	adc	r26, r26
 7d4:	bb 1f       	adc	r27, r27
 7d6:	a6 17       	cp	r26, r22
 7d8:	b7 07       	cpc	r27, r23
 7da:	10 f0       	brcs	.+4      	; 0x7e0 <__udivmodhi4_ep>
 7dc:	a6 1b       	sub	r26, r22
 7de:	b7 0b       	sbc	r27, r23

000007e0 <__udivmodhi4_ep>:
 7e0:	88 1f       	adc	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	5a 95       	dec	r21
 7e6:	a9 f7       	brne	.-22     	; 0x7d2 <__udivmodhi4_loop>
 7e8:	80 95       	com	r24
 7ea:	90 95       	com	r25
 7ec:	bc 01       	movw	r22, r24
 7ee:	cd 01       	movw	r24, r26
 7f0:	08 95       	ret

000007f2 <_exit>:
 7f2:	f8 94       	cli

000007f4 <__stop_program>:
 7f4:	ff cf       	rjmp	.-2      	; 0x7f4 <__stop_program>
