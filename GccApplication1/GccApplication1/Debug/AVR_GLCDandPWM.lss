
AVR_GLCDandPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000314  00800060  000009f8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001552  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a89  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec5  00000000  00000000  00002eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00003d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000072f3  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b27  00000000  00000000  0000b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000bdda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002bc9  00000000  00000000  0000bea2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	1e d1       	rcall	.+572    	; 0x2b4 <main>
  78:	bd c4       	rjmp	.+2426   	; 0x9f4 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <SELECTBOTH>:

#include "MCAL/DIO/Dio.h"
#include "GLCD_cfg.h"
#include "GLCD.h"

void SELECTBOTH()   { Dio_WriteChannel(CS1, DIO_LOW); Dio_WriteChannel(CS2, DIO_LOW); }
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	75 d2       	rcall	.+1258   	; 0x56c <Dio_WriteChannel>
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	72 c2       	rjmp	.+1252   	; 0x56c <Dio_WriteChannel>
  88:	08 95       	ret

0000008a <SELECTFIRST>:

void SELECTFIRST()  { Dio_WriteChannel(CS1, DIO_LOW); Dio_WriteChannel(CS2, DIO_HIGH); }
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	8c e0       	ldi	r24, 0x0C	; 12
  8e:	6e d2       	rcall	.+1244   	; 0x56c <Dio_WriteChannel>
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	8d e0       	ldi	r24, 0x0D	; 13
  94:	6b c2       	rjmp	.+1238   	; 0x56c <Dio_WriteChannel>
  96:	08 95       	ret

00000098 <SELECTSECOND>:

void SELECTSECOND() { Dio_WriteChannel(CS1, DIO_HIGH); Dio_WriteChannel(CS2, DIO_LOW); }
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	67 d2       	rcall	.+1230   	; 0x56c <Dio_WriteChannel>
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	8d e0       	ldi	r24, 0x0D	; 13
  a2:	64 c2       	rjmp	.+1224   	; 0x56c <Dio_WriteChannel>
  a4:	08 95       	ret

000000a6 <GLCD_Command>:



void GLCD_Command(char Command)
{
	Dio_WriteChannelGroup(dataPort, 8, Command);    /* Copy command on data Pin */
  a6:	48 2f       	mov	r20, r24
  a8:	68 e0       	ldi	r22, 0x08	; 8
  aa:	86 e6       	ldi	r24, 0x66	; 102
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	07 d3       	rcall	.+1550   	; 0x6be <Dio_WriteChannelGroup>
	Dio_WriteChannel(RS, DIO_LOW);                  /* Make RS LOW for command register */
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	89 e0       	ldi	r24, 0x09	; 9
  b4:	5b d2       	rcall	.+1206   	; 0x56c <Dio_WriteChannel>
	Dio_WriteChannel(RW, DIO_LOW);                  /* Make RW LOW for write operation */
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	58 d2       	rcall	.+1200   	; 0x56c <Dio_WriteChannel>
	Dio_WriteChannel(EN, DIO_HIGH);                 /* Make HIGH-LOW transition on Enable */
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	8b e0       	ldi	r24, 0x0B	; 11
  c0:	55 d2       	rcall	.+1194   	; 0x56c <Dio_WriteChannel>
  c2:	8d e0       	ldi	r24, 0x0D	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <GLCD_Command+0x1e>
  c8:	00 00       	nop
	_delay_us(5);
	Dio_WriteChannel(EN, DIO_LOW);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	8b e0       	ldi	r24, 0x0B	; 11
  ce:	4e d2       	rcall	.+1180   	; 0x56c <Dio_WriteChannel>
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <GLCD_Command+0x2c>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <GLCD_Data>:
  da:	48 2f       	mov	r20, r24
}


void GLCD_Data(char Data)
{
	Dio_WriteChannelGroup(dataPort, 8, Data);   /* Copy data on data Pin */
  dc:	68 e0       	ldi	r22, 0x08	; 8
  de:	86 e6       	ldi	r24, 0x66	; 102
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	ed d2       	rcall	.+1498   	; 0x6be <Dio_WriteChannelGroup>
	Dio_WriteChannel(RS, DIO_HIGH);             /* Make RS HIGH for data register */
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	89 e0       	ldi	r24, 0x09	; 9
  e8:	41 d2       	rcall	.+1154   	; 0x56c <Dio_WriteChannel>
	Dio_WriteChannel(RW, DIO_LOW);              /* Make RW LOW for write operation */
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	3e d2       	rcall	.+1148   	; 0x56c <Dio_WriteChannel>
	Dio_WriteChannel(EN, DIO_HIGH);             /* Make HIGH-LOW transition on Enable */
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	8b e0       	ldi	r24, 0x0B	; 11
  f4:	3b d2       	rcall	.+1142   	; 0x56c <Dio_WriteChannel>
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <GLCD_Data+0x1e>
  fc:	00 00       	nop
	_delay_us(5);
	Dio_WriteChannel(EN, DIO_LOW);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	8b e0       	ldi	r24, 0x0B	; 11
 102:	34 d2       	rcall	.+1128   	; 0x56c <Dio_WriteChannel>
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <GLCD_Data+0x2c>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <GLCD_Init>:
 10e:	cf 93       	push	r28
	_delay_us(5);
}


void GLCD_Init()
{
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	2e 97       	sbiw	r28, 0x0e	; 14
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	Dio_DirectionType dataPortdir[] = {DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT};
 122:	88 e0       	ldi	r24, 0x08	; 8
 124:	ee e6       	ldi	r30, 0x6E	; 110
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <GLCD_Init+0x1e>
	Dio_InitChannelGroup(dataPort, 8, dataPortdir);
 134:	ae 01       	movw	r20, r28
 136:	4f 5f       	subi	r20, 0xFF	; 255
 138:	5f 4f       	sbci	r21, 0xFF	; 255
 13a:	68 e0       	ldi	r22, 0x08	; 8
 13c:	86 e6       	ldi	r24, 0x66	; 102
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	f8 d2       	rcall	.+1520   	; 0x732 <Dio_InitChannelGroup>

	Dio_DirectionType cmddir[] = {DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT, DIO_OUTPUT};
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	e6 e7       	ldi	r30, 0x76	; 118
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	de 01       	movw	r26, r28
 14a:	19 96       	adiw	r26, 0x09	; 9
 14c:	01 90       	ld	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	8a 95       	dec	r24
 152:	e1 f7       	brne	.-8      	; 0x14c <GLCD_Init+0x3e>
	Dio_InitChannelGroup(cmd, 6, cmddir);
 154:	ae 01       	movw	r20, r28
 156:	47 5f       	subi	r20, 0xF7	; 247
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	66 e0       	ldi	r22, 0x06	; 6
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	90 e0       	ldi	r25, 0x00	; 0

	/* Select both left & right half of display & Keep reset Pin high */
	SELECTBOTH();
 160:	e8 d2       	rcall	.+1488   	; 0x732 <Dio_InitChannelGroup>
	Dio_WriteChannel(RST, DIO_HIGH);
 162:	8c df       	rcall	.-232    	; 0x7c <SELECTBOTH>
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	8e e0       	ldi	r24, 0x0E	; 14
 168:	01 d2       	rcall	.+1026   	; 0x56c <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9c e9       	ldi	r25, 0x9C	; 156
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <GLCD_Init+0x60>
 172:	00 c0       	rjmp	.+0      	; 0x174 <GLCD_Init+0x66>

	_delay_ms(20);
	GLCD_Command(0x3E); /* Display OFF */
 174:	00 00       	nop
 176:	8e e3       	ldi	r24, 0x3E	; 62
	GLCD_Command(0x40); /* Set Y address (column=0) */
 178:	96 df       	rcall	.-212    	; 0xa6 <GLCD_Command>
 17a:	80 e4       	ldi	r24, 0x40	; 64
	GLCD_Command(0xB8); /* Set x address (page=0) */
 17c:	94 df       	rcall	.-216    	; 0xa6 <GLCD_Command>
 17e:	88 eb       	ldi	r24, 0xB8	; 184
 180:	92 df       	rcall	.-220    	; 0xa6 <GLCD_Command>
	GLCD_Command(0xC0); /* Set z address (start line=0) */
 182:	80 ec       	ldi	r24, 0xC0	; 192
 184:	90 df       	rcall	.-224    	; 0xa6 <GLCD_Command>
 186:	8f e3       	ldi	r24, 0x3F	; 63
	GLCD_Command(0x3F); /* Display ON */
 188:	8e df       	rcall	.-228    	; 0xa6 <GLCD_Command>
 18a:	2e 96       	adiw	r28, 0x0e	; 14
 18c:	0f b6       	in	r0, 0x3f	; 63
}
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <GLCD_PrintChar>:
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14

void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
	int i = col ;
	for(i = col; i < 5+col; i++)
 1aa:	c4 2f       	mov	r28, r20
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	9e 01       	movw	r18, r28
 1b0:	2b 5f       	subi	r18, 0xFB	; 251
 1b2:	3f 4f       	sbci	r19, 0xFF	; 255
 1b4:	c2 17       	cp	r28, r18
 1b6:	d3 07       	cpc	r29, r19
 1b8:	14 f5       	brge	.+68     	; 0x1fe <GLCD_PrintChar+0x62>
 1ba:	08 2e       	mov	r0, r24
 1bc:	00 0c       	add	r0, r0
 1be:	99 0b       	sbc	r25, r25
 1c0:	8c 01       	movw	r16, r24
 1c2:	00 0f       	add	r16, r16
 1c4:	11 1f       	adc	r17, r17
 1c6:	00 0f       	add	r16, r16
 1c8:	11 1f       	adc	r17, r17
 1ca:	08 0f       	add	r16, r24
 1cc:	19 1f       	adc	r17, r25
 1ce:	04 58       	subi	r16, 0x84	; 132
 1d0:	1f 4f       	sbci	r17, 0xFF	; 255
 1d2:	79 01       	movw	r14, r18
	{
		if (64==i) {
			SELECTSECOND();
			GLCD_Command(0x40);		/* Set Y address (column=0) */
			GLCD_Command(0xB8+row);
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f8 eb       	ldi	r31, 0xB8	; 184
 1d8:	df 2e       	mov	r13, r31
 1da:	f0 2d       	mov	r31, r0
 1dc:	d6 0e       	add	r13, r22
void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
	int i = col ;
	for(i = col; i < 5+col; i++)
	{
		if (64==i) {
 1de:	c0 34       	cpi	r28, 0x40	; 64
 1e0:	d1 05       	cpc	r29, r1
 1e2:	29 f4       	brne	.+10     	; 0x1ee <GLCD_PrintChar+0x52>
			SELECTSECOND();
 1e4:	59 df       	rcall	.-334    	; 0x98 <SELECTSECOND>
			GLCD_Command(0x40);		/* Set Y address (column=0) */
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	5e df       	rcall	.-324    	; 0xa6 <GLCD_Command>
			GLCD_Command(0xB8+row);
 1ea:	8d 2d       	mov	r24, r13
 1ec:	5c df       	rcall	.-328    	; 0xa6 <GLCD_Command>
 1ee:	f8 01       	movw	r30, r16
		}
		GLCD_Data(font[x][i-col]);
 1f0:	81 91       	ld	r24, Z+
 1f2:	8f 01       	movw	r16, r30
 1f4:	72 df       	rcall	.-284    	; 0xda <GLCD_Data>
 1f6:	21 96       	adiw	r28, 0x01	; 1
}

void GLCD_PrintChar(char x,uint8_t row,uint8_t col)
{
	int i = col ;
	for(i = col; i < 5+col; i++)
 1f8:	ce 15       	cp	r28, r14
 1fa:	df 05       	cpc	r29, r15
 1fc:	81 f7       	brne	.-32     	; 0x1de <GLCD_PrintChar+0x42>
 1fe:	df 91       	pop	r29
			GLCD_Command(0x40);		/* Set Y address (column=0) */
			GLCD_Command(0xB8+row);
		}
		GLCD_Data(font[x][i-col]);
	}
}
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	08 95       	ret

0000020e <Print_String>:
 20e:	ff 92       	push	r15
void Print_String(char* x,uint8_t row)
{
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	f6 2e       	mov	r15, r22
	int i = 0,col =0;
	SELECTFIRST();
 21c:	36 df       	rcall	.-404    	; 0x8a <SELECTFIRST>
	GLCD_Command(0x40);
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	42 df       	rcall	.-380    	; 0xa6 <GLCD_Command>
	GLCD_Command((0xB8) + row);
 222:	88 eb       	ldi	r24, 0xB8	; 184
 224:	8f 0d       	add	r24, r15
 226:	3f df       	rcall	.-386    	; 0xa6 <GLCD_Command>
	
	while (x[i])
 228:	88 81       	ld	r24, Y
 22a:	88 23       	and	r24, r24
 22c:	69 f0       	breq	.+26     	; 0x248 <Print_String+0x3a>
 22e:	8e 01       	movw	r16, r28
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		GLCD_PrintChar(x[i],row,col);
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	4c 2f       	mov	r20, r28
 238:	6f 2d       	mov	r22, r15
 23a:	b0 df       	rcall	.-160    	; 0x19c <GLCD_PrintChar>
	int i = 0,col =0;
	SELECTFIRST();
	GLCD_Command(0x40);
	GLCD_Command((0xB8) + row);
	
	while (x[i])
 23c:	f8 01       	movw	r30, r16
 23e:	81 91       	ld	r24, Z+
 240:	8f 01       	movw	r16, r30
 242:	cb 5f       	subi	r28, 0xFB	; 251
 244:	81 11       	cpse	r24, r1
 246:	f7 cf       	rjmp	.-18     	; 0x236 <Print_String+0x28>
	{
		GLCD_PrintChar(x[i],row,col);
		i++; col+=5;
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	08 95       	ret

00000254 <GLCD_ClearAll>:
void GLCD_ClearAll()			/* GLCD all display clear function */
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
	int i,j;

	SELECTBOTH();
 25a:	10 df       	rcall	.-480    	; 0x7c <SELECTBOTH>
 25c:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < 8; i++)
	{
		
		GLCD_Command(0x40);
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	22 df       	rcall	.-444    	; 0xa6 <GLCD_Command>
		GLCD_Command((0xB8) + i);
 262:	81 2f       	mov	r24, r17
 264:	20 df       	rcall	.-448    	; 0xa6 <GLCD_Command>
 266:	c0 e4       	ldi	r28, 0x40	; 64
 268:	d0 e0       	ldi	r29, 0x00	; 0

		for(j = 0; j < 64 ; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	36 df       	rcall	.-404    	; 0xda <GLCD_Data>
 26e:	21 97       	sbiw	r28, 0x01	; 1
 270:	e1 f7       	brne	.-8      	; 0x26a <GLCD_ClearAll+0x16>
	{
		
		GLCD_Command(0x40);
		GLCD_Command((0xB8) + i);

		for(j = 0; j < 64 ; j++)
 272:	1f 5f       	subi	r17, 0xFF	; 255
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;

	SELECTBOTH();
	for(i = 0; i < 8; i++)
 274:	10 3c       	cpi	r17, 0xC0	; 192
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
			//delay_us(5000);
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 276:	99 f7       	brne	.-26     	; 0x25e <GLCD_ClearAll+0xa>
 278:	80 e4       	ldi	r24, 0x40	; 64
 27a:	15 df       	rcall	.-470    	; 0xa6 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 27c:	88 eb       	ldi	r24, 0xB8	; 184
 27e:	13 df       	rcall	.-474    	; 0xa6 <GLCD_Command>
 280:	df 91       	pop	r29


}
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <ADC_Init>:
#include "GLCD.h"
#include "MCAL/DIO/Dio.h"

void ADC_Init() {
	// Configure reference voltage and enable ADC
	Dio_InitChannel(1,DIO_INPUT);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	c6 d0       	rcall	.+396    	; 0x41a <Dio_InitChannel>
	Dio_InitChannel(2,DIO_INPUT);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	c3 d0       	rcall	.+390    	; 0x41a <Dio_InitChannel>
	ADMUX = (1 << REFS0);  // AVCC as reference voltage
 294:	80 e4       	ldi	r24, 0x40	; 64
 296:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 298:	87 e8       	ldi	r24, 0x87	; 135
 29a:	86 b9       	out	0x06, r24	; 6
 29c:	08 95       	ret

0000029e <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	// Select ADC channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 29e:	97 b1       	in	r25, 0x07	; 7
 2a0:	90 7f       	andi	r25, 0xF0	; 240
 2a2:	8f 70       	andi	r24, 0x0F	; 15
 2a4:	89 2b       	or	r24, r25
 2a6:	87 b9       	out	0x07, r24	; 7
    //ADMUX = (1 << REFS0);

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 2a8:	36 9a       	sbi	0x06, 6	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 2aa:	36 99       	sbic	0x06, 6	; 6
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <ADC_Read+0xc>

	// Return ADC result
	return ADC;
 2ae:	84 b1       	in	r24, 0x04	; 4
 2b0:	95 b1       	in	r25, 0x05	; 5
}
 2b2:	08 95       	ret

000002b4 <main>:


int main(void)
{
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	a7 97       	sbiw	r28, 0x27	; 39
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
	GLCD_Init();
 2c8:	22 df       	rcall	.-444    	; 0x10e <GLCD_Init>
	ADC_Init();
 2ca:	de df       	rcall	.-68     	; 0x288 <ADC_Init>
	GLCD_ClearAll();
 2cc:	c3 df       	rcall	.-122    	; 0x254 <GLCD_ClearAll>
 2ce:	61 e0       	ldi	r22, 0x01	; 1
	Print_String("PWM Signal ", 1);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	93 e0       	ldi	r25, 0x03	; 3
 2d4:	9c df       	rcall	.-200    	; 0x20e <Print_String>
 2d6:	83 e1       	ldi	r24, 0x13	; 19

	int pwmvalue = 0;
	int timefactor = 10; //min:2 max: 25
	char duty[] = "Duty Cycle = 000 %";
 2d8:	ed e0       	ldi	r30, 0x0D	; 13
 2da:	f3 e0       	ldi	r31, 0x03	; 3
 2dc:	de 01       	movw	r26, r28
 2de:	11 96       	adiw	r26, 0x01	; 1
 2e0:	01 90       	ld	r0, Z+
 2e2:	0d 92       	st	X+, r0
 2e4:	8a 95       	dec	r24
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x2c>
 2e8:	84 e1       	ldi	r24, 0x14	; 20
	char freq[] = "Frequency = 320 KHZ";
 2ea:	e0 e2       	ldi	r30, 0x20	; 32
 2ec:	f3 e0       	ldi	r31, 0x03	; 3
 2ee:	de 01       	movw	r26, r28
 2f0:	54 96       	adiw	r26, 0x14	; 20
 2f2:	01 90       	ld	r0, Z+
 2f4:	0d 92       	st	X+, r0
 2f6:	8a 95       	dec	r24
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x3e>
 2fa:	00 e0       	ldi	r16, 0x00	; 0
	GLCD_Init();
	ADC_Init();
	GLCD_ClearAll();
	Print_String("PWM Signal ", 1);

	int pwmvalue = 0;
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	0f 2e       	mov	r0, r31
	{
		SELECTFIRST();
		GLCD_Command(0x40);        /* Set Y address (column=0) */
		GLCD_Command(0xB8 + 2);     /* Set x address (page=0) */

		int dc = pwmvalue * 100 / 256;
 300:	f4 e6       	ldi	r31, 0x64	; 100
 302:	3f 2e       	mov	r3, r31
 304:	f0 2d       	mov	r31, r0
 306:	0f 2e       	mov	r0, r31
			duty[13] = '1';
			duty[14] = '0';
			duty[15] = '0';
			}
			else {
		duty[13] = '0';	
 308:	f0 e3       	ldi	r31, 0x30	; 48
 30a:	5f 2e       	mov	r5, r31
 30c:	f0 2d       	mov	r31, r0
 30e:	0f 2e       	mov	r0, r31
		duty[14] = dc/10+'0';
		duty[15] = dc%10+'0';
 310:	fa e0       	ldi	r31, 0x0A	; 10
 312:	8f 2e       	mov	r8, r31
 314:	91 2c       	mov	r9, r1
 316:	f0 2d       	mov	r31, r0
 318:	21 2c       	mov	r2, r1
		GLCD_Command(0x40);        /* Set Y address (column=0) */
		GLCD_Command(0xB8 + 5);

		int x = pwmvalue / timefactor;
		int nextk = 256 / timefactor;
		int k = 0;
 31a:	61 2c       	mov	r6, r1
 31c:	0f 2e       	mov	r0, r31
		SELECTFIRST();
		GLCD_Command(0x40);        /* Set Y address (column=0) */
		GLCD_Command(0xB8 + 5);

		int x = pwmvalue / timefactor;
		int nextk = 256 / timefactor;
 31e:	f9 e1       	ldi	r31, 0x19	; 25
 320:	4f 2e       	mov	r4, r31
 322:	f0 2d       	mov	r31, r0
	char freq[] = "Frequency = 320 KHZ";
	uint16_t adcValue;

	while (1)
	{
		SELECTFIRST();
 324:	71 2c       	mov	r7, r1
		GLCD_Command(0x40);        /* Set Y address (column=0) */
 326:	b1 de       	rcall	.-670    	; 0x8a <SELECTFIRST>
 328:	80 e4       	ldi	r24, 0x40	; 64
 32a:	bd de       	rcall	.-646    	; 0xa6 <GLCD_Command>
		GLCD_Command(0xB8 + 2);     /* Set x address (page=0) */
 32c:	8a eb       	ldi	r24, 0xBA	; 186
 32e:	bb de       	rcall	.-650    	; 0xa6 <GLCD_Command>
 330:	30 9e       	mul	r3, r16

		int dc = pwmvalue * 100 / 256;
 332:	c0 01       	movw	r24, r0
 334:	31 9e       	mul	r3, r17
 336:	90 0d       	add	r25, r0
 338:	11 24       	eor	r1, r1
 33a:	ac 01       	movw	r20, r24
 33c:	99 23       	and	r25, r25
 33e:	14 f4       	brge	.+4      	; 0x344 <main+0x90>
 340:	41 50       	subi	r20, 0x01	; 1
 342:	5f 4f       	sbci	r21, 0xFF	; 255
 344:	25 2f       	mov	r18, r21
 346:	35 2f       	mov	r19, r21
 348:	33 0f       	add	r19, r19
 34a:	33 0b       	sbc	r19, r19
 34c:	24 36       	cpi	r18, 0x64	; 100
		if (dc == 100){
 34e:	31 05       	cpc	r19, r1
 350:	29 f4       	brne	.+10     	; 0x35c <main+0xa8>
 352:	81 e3       	ldi	r24, 0x31	; 49
			duty[13] = '1';
 354:	8e 87       	std	Y+14, r24	; 0x0e
			duty[14] = '0';
 356:	5f 86       	std	Y+15, r5	; 0x0f
			duty[15] = '0';
 358:	58 8a       	std	Y+16, r5	; 0x10
 35a:	0b c0       	rjmp	.+22     	; 0x372 <main+0xbe>
			}
			else {
		duty[13] = '0';	
 35c:	5e 86       	std	Y+14, r5	; 0x0e
		duty[14] = dc/10+'0';
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	7a e0       	ldi	r23, 0x0A	; 10
 362:	21 d3       	rcall	.+1602   	; 0x9a6 <__divmodhi4>
 364:	60 5d       	subi	r22, 0xD0	; 208
 366:	6f 87       	std	Y+15, r22	; 0x0f
		duty[15] = dc%10+'0';
 368:	c9 01       	movw	r24, r18
 36a:	b4 01       	movw	r22, r8
 36c:	1c d3       	rcall	.+1592   	; 0x9a6 <__divmodhi4>
 36e:	80 5d       	subi	r24, 0xD0	; 208
}
		Print_String(duty, 2);
 370:	88 8b       	std	Y+16, r24	; 0x10
 372:	62 e0       	ldi	r22, 0x02	; 2
 374:	ce 01       	movw	r24, r28
		Print_String(freq, 3);
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	4a df       	rcall	.-364    	; 0x20e <Print_String>
 37a:	63 e0       	ldi	r22, 0x03	; 3
 37c:	ce 01       	movw	r24, r28

		SELECTFIRST();
 37e:	44 96       	adiw	r24, 0x14	; 20
 380:	46 df       	rcall	.-372    	; 0x20e <Print_String>
		GLCD_Command(0x40);        /* Set Y address (column=0) */
 382:	83 de       	rcall	.-762    	; 0x8a <SELECTFIRST>
 384:	80 e4       	ldi	r24, 0x40	; 64
 386:	8f de       	rcall	.-738    	; 0xa6 <GLCD_Command>
		GLCD_Command(0xB8 + 5);
 388:	8d eb       	ldi	r24, 0xBD	; 189
 38a:	8d de       	rcall	.-742    	; 0xa6 <GLCD_Command>
 38c:	c8 01       	movw	r24, r16

		int x = pwmvalue / timefactor;
 38e:	b4 01       	movw	r22, r8
 390:	0a d3       	rcall	.+1556   	; 0x9a6 <__divmodhi4>
 392:	5b 01       	movw	r10, r22
		int nextk = 256 / timefactor;
		int k = 0;

		for (int i = 0; i < 128; i++)
 394:	00 e0       	ldi	r16, 0x00	; 0
 396:	10 e0       	ldi	r17, 0x00	; 0
		GLCD_Command(0x40);        /* Set Y address (column=0) */
		GLCD_Command(0xB8 + 5);

		int x = pwmvalue / timefactor;
		int nextk = 256 / timefactor;
		int k = 0;
 398:	c2 2c       	mov	r12, r2
 39a:	d6 2c       	mov	r13, r6
		SELECTFIRST();
		GLCD_Command(0x40);        /* Set Y address (column=0) */
		GLCD_Command(0xB8 + 5);

		int x = pwmvalue / timefactor;
		int nextk = 256 / timefactor;
 39c:	e4 2c       	mov	r14, r4
 39e:	f7 2c       	mov	r15, r7
 3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <main+0xfe>
		int k = 0;

		for (int i = 0; i < 128; i++)
		{
			if (i == 64)
 3a2:	00 34       	cpi	r16, 0x40	; 64
 3a4:	11 05       	cpc	r17, r1
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <main+0xfe>
			{
				SELECTSECOND();
 3a8:	77 de       	rcall	.-786    	; 0x98 <SELECTSECOND>
				GLCD_Command(0x40); /* Set Y address (column=0) */
 3aa:	80 e4       	ldi	r24, 0x40	; 64
 3ac:	7c de       	rcall	.-776    	; 0xa6 <GLCD_Command>
 3ae:	8d eb       	ldi	r24, 0xBD	; 189
				GLCD_Command(0xB8 + 5);
 3b0:	7a de       	rcall	.-780    	; 0xa6 <GLCD_Command>
 3b2:	e0 16       	cp	r14, r16
			}

			if (i == nextk || i == x + k)
 3b4:	f1 06       	cpc	r15, r17
 3b6:	51 f1       	breq	.+84     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3b8:	c5 01       	movw	r24, r10
 3ba:	8c 0d       	add	r24, r12
 3bc:	9d 1d       	adc	r25, r13
 3be:	80 17       	cp	r24, r16
 3c0:	91 07       	cpc	r25, r17
			{
				GLCD_Data(CHANGEVOLT);
 3c2:	19 f4       	brne	.+6      	; 0x3ca <main+0x116>
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	89 de       	rcall	.-750    	; 0xda <GLCD_Data>
				{
					k = nextk;
					nextk = 256 / timefactor + i;
				}
			}
			else if (i > x + k)
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <main+0x126>
 3ca:	80 17       	cp	r24, r16
 3cc:	91 07       	cpc	r25, r17
			{
				GLCD_Data(LOWVOLT);
 3ce:	1c f4       	brge	.+6      	; 0x3d6 <main+0x122>
 3d0:	80 e8       	ldi	r24, 0x80	; 128
			}
			else
			{
				GLCD_Data(HIGHVOLT);
 3d2:	83 de       	rcall	.-762    	; 0xda <GLCD_Data>
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <main+0x126>
 3d6:	81 e0       	ldi	r24, 0x01	; 1

		int x = pwmvalue / timefactor;
		int nextk = 256 / timefactor;
		int k = 0;

		for (int i = 0; i < 128; i++)
 3d8:	80 de       	rcall	.-768    	; 0xda <GLCD_Data>
 3da:	0f 5f       	subi	r16, 0xFF	; 255
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
 3de:	00 38       	cpi	r16, 0x80	; 128
 3e0:	11 05       	cpc	r17, r1
			else
			{
				GLCD_Data(HIGHVOLT);
			}
		}
		adcValue = ADC_Read(ADC_CHANNEL)*(256.0/1023.0);
 3e2:	f9 f6       	brne	.-66     	; 0x3a2 <main+0xee>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
		pwmvalue = adcValue;
 3e6:	5b df       	rcall	.-330    	; 0x29e <ADC_Read>
 3e8:	bc 01       	movw	r22, r24
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	ea d1       	rcall	.+980    	; 0x7c4 <__floatunsisf>
 3f0:	28 e0       	ldi	r18, 0x08	; 8
 3f2:	30 e2       	ldi	r19, 0x20	; 32
 3f4:	40 e8       	ldi	r20, 0x80	; 128
 3f6:	5e e3       	ldi	r21, 0x3E	; 62
 3f8:	4b d2       	rcall	.+1174   	; 0x890 <__mulsf3>
 3fa:	b8 d1       	rcall	.+880    	; 0x76c <__fixunssfsi>
 3fc:	8b 01       	movw	r16, r22
 3fe:	8f ec       	ldi	r24, 0xCF	; 207
 400:	97 e0       	ldi	r25, 0x07	; 7
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	8d cf       	rjmp	.-230    	; 0x326 <main+0x72>
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	65 de       	rcall	.-822    	; 0xda <GLCD_Data>
				GLCD_Command(0xB8 + 5);
			}

			if (i == nextk || i == x + k)
			{
				GLCD_Data(CHANGEVOLT);
 410:	67 01       	movw	r12, r14
 412:	c8 01       	movw	r24, r16
 414:	49 96       	adiw	r24, 0x19	; 25
 416:	7c 01       	movw	r14, r24
				if (i == nextk)
				{
					k = nextk;
					nextk = 256 / timefactor + i;
 418:	e0 cf       	rjmp	.-64     	; 0x3da <main+0x126>

0000041a <Dio_InitChannel>:
 41a:	80 32       	cpi	r24, 0x20	; 32
 41c:	08 f0       	brcs	.+2      	; 0x420 <Dio_InitChannel+0x6>
 41e:	a5 c0       	rjmp	.+330    	; 0x56a <Dio_InitChannel+0x150>
    {
        Data |= (Dio_ReadChannel(ChannelIds[i]) << i);
    }
    
    return Data;
}
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	fc 01       	movw	r30, r24
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	ec 5c       	subi	r30, 0xCC	; 204
 42c:	fc 4f       	sbci	r31, 0xFC	; 252
 42e:	20 81       	ld	r18, Z
 430:	21 30       	cpi	r18, 0x01	; 1
 432:	69 f1       	breq	.+90     	; 0x48e <Dio_InitChannel+0x74>
 434:	38 f0       	brcs	.+14     	; 0x444 <Dio_InitChannel+0x2a>
 436:	22 30       	cpi	r18, 0x02	; 2
 438:	09 f4       	brne	.+2      	; 0x43c <Dio_InitChannel+0x22>
 43a:	4e c0       	rjmp	.+156    	; 0x4d8 <Dio_InitChannel+0xbe>
 43c:	23 30       	cpi	r18, 0x03	; 3
 43e:	09 f4       	brne	.+2      	; 0x442 <Dio_InitChannel+0x28>
 440:	70 c0       	rjmp	.+224    	; 0x522 <Dio_InitChannel+0x108>
 442:	08 95       	ret
 444:	61 30       	cpi	r22, 0x01	; 1
 446:	89 f4       	brne	.+34     	; 0x46a <Dio_InitChannel+0x50>
 448:	2a b3       	in	r18, 0x1a	; 26
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	fc 01       	movw	r30, r24
 450:	ec 5c       	subi	r30, 0xCC	; 204
 452:	fc 4f       	sbci	r31, 0xFC	; 252
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	01 80       	ldd	r0, Z+1	; 0x01
 45a:	02 c0       	rjmp	.+4      	; 0x460 <Dio_InitChannel+0x46>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <Dio_InitChannel+0x42>
 464:	82 2b       	or	r24, r18
 466:	8a bb       	out	0x1a, r24	; 26
 468:	08 95       	ret
 46a:	2a b3       	in	r18, 0x1a	; 26
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	fc 01       	movw	r30, r24
 472:	ec 5c       	subi	r30, 0xCC	; 204
 474:	fc 4f       	sbci	r31, 0xFC	; 252
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	01 80       	ldd	r0, Z+1	; 0x01
 47c:	02 c0       	rjmp	.+4      	; 0x482 <Dio_InitChannel+0x68>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <Dio_InitChannel+0x64>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	8a bb       	out	0x1a, r24	; 26
 48c:	08 95       	ret
 48e:	61 30       	cpi	r22, 0x01	; 1
 490:	89 f4       	brne	.+34     	; 0x4b4 <Dio_InitChannel+0x9a>
 492:	27 b3       	in	r18, 0x17	; 23
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	fc 01       	movw	r30, r24
 49a:	ec 5c       	subi	r30, 0xCC	; 204
 49c:	fc 4f       	sbci	r31, 0xFC	; 252
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	01 80       	ldd	r0, Z+1	; 0x01
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <Dio_InitChannel+0x90>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <Dio_InitChannel+0x8c>
 4ae:	82 2b       	or	r24, r18
 4b0:	87 bb       	out	0x17, r24	; 23
 4b2:	08 95       	ret
 4b4:	27 b3       	in	r18, 0x17	; 23
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	fc 01       	movw	r30, r24
 4bc:	ec 5c       	subi	r30, 0xCC	; 204
 4be:	fc 4f       	sbci	r31, 0xFC	; 252
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	01 80       	ldd	r0, Z+1	; 0x01
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <Dio_InitChannel+0xb2>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <Dio_InitChannel+0xae>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	87 bb       	out	0x17, r24	; 23
 4d6:	08 95       	ret
 4d8:	61 30       	cpi	r22, 0x01	; 1
 4da:	89 f4       	brne	.+34     	; 0x4fe <Dio_InitChannel+0xe4>
 4dc:	24 b3       	in	r18, 0x14	; 20
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	fc 01       	movw	r30, r24
 4e4:	ec 5c       	subi	r30, 0xCC	; 204
 4e6:	fc 4f       	sbci	r31, 0xFC	; 252
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	01 80       	ldd	r0, Z+1	; 0x01
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <Dio_InitChannel+0xda>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <Dio_InitChannel+0xd6>
 4f8:	82 2b       	or	r24, r18
 4fa:	84 bb       	out	0x14, r24	; 20
 4fc:	08 95       	ret
 4fe:	24 b3       	in	r18, 0x14	; 20
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	fc 01       	movw	r30, r24
 506:	ec 5c       	subi	r30, 0xCC	; 204
 508:	fc 4f       	sbci	r31, 0xFC	; 252
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	01 80       	ldd	r0, Z+1	; 0x01
 510:	02 c0       	rjmp	.+4      	; 0x516 <Dio_InitChannel+0xfc>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <Dio_InitChannel+0xf8>
 51a:	80 95       	com	r24
 51c:	82 23       	and	r24, r18
 51e:	84 bb       	out	0x14, r24	; 20
 520:	08 95       	ret
 522:	61 30       	cpi	r22, 0x01	; 1
 524:	89 f4       	brne	.+34     	; 0x548 <Dio_InitChannel+0x12e>
 526:	21 b3       	in	r18, 0x11	; 17
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	fc 01       	movw	r30, r24
 52e:	ec 5c       	subi	r30, 0xCC	; 204
 530:	fc 4f       	sbci	r31, 0xFC	; 252
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	01 80       	ldd	r0, Z+1	; 0x01
 538:	02 c0       	rjmp	.+4      	; 0x53e <Dio_InitChannel+0x124>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <Dio_InitChannel+0x120>
 542:	82 2b       	or	r24, r18
 544:	81 bb       	out	0x11, r24	; 17
 546:	08 95       	ret
 548:	21 b3       	in	r18, 0x11	; 17
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	fc 01       	movw	r30, r24
 550:	ec 5c       	subi	r30, 0xCC	; 204
 552:	fc 4f       	sbci	r31, 0xFC	; 252
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	01 80       	ldd	r0, Z+1	; 0x01
 55a:	02 c0       	rjmp	.+4      	; 0x560 <Dio_InitChannel+0x146>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <Dio_InitChannel+0x142>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	81 bb       	out	0x11, r24	; 17
 56a:	08 95       	ret

0000056c <Dio_WriteChannel>:
 56c:	80 32       	cpi	r24, 0x20	; 32
 56e:	08 f0       	brcs	.+2      	; 0x572 <Dio_WriteChannel+0x6>
 570:	a5 c0       	rjmp	.+330    	; 0x6bc <Dio_WriteChannel+0x150>
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	fc 01       	movw	r30, r24
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	ec 5c       	subi	r30, 0xCC	; 204
 57e:	fc 4f       	sbci	r31, 0xFC	; 252
 580:	20 81       	ld	r18, Z
 582:	21 30       	cpi	r18, 0x01	; 1
 584:	69 f1       	breq	.+90     	; 0x5e0 <Dio_WriteChannel+0x74>
 586:	38 f0       	brcs	.+14     	; 0x596 <Dio_WriteChannel+0x2a>
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	09 f4       	brne	.+2      	; 0x58e <Dio_WriteChannel+0x22>
 58c:	4e c0       	rjmp	.+156    	; 0x62a <Dio_WriteChannel+0xbe>
 58e:	23 30       	cpi	r18, 0x03	; 3
 590:	09 f4       	brne	.+2      	; 0x594 <Dio_WriteChannel+0x28>
 592:	70 c0       	rjmp	.+224    	; 0x674 <Dio_WriteChannel+0x108>
 594:	08 95       	ret
 596:	61 30       	cpi	r22, 0x01	; 1
 598:	89 f4       	brne	.+34     	; 0x5bc <Dio_WriteChannel+0x50>
 59a:	2b b3       	in	r18, 0x1b	; 27
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	fc 01       	movw	r30, r24
 5a2:	ec 5c       	subi	r30, 0xCC	; 204
 5a4:	fc 4f       	sbci	r31, 0xFC	; 252
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	01 80       	ldd	r0, Z+1	; 0x01
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Dio_WriteChannel+0x46>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Dio_WriteChannel+0x42>
 5b6:	82 2b       	or	r24, r18
 5b8:	8b bb       	out	0x1b, r24	; 27
 5ba:	08 95       	ret
 5bc:	2b b3       	in	r18, 0x1b	; 27
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	fc 01       	movw	r30, r24
 5c4:	ec 5c       	subi	r30, 0xCC	; 204
 5c6:	fc 4f       	sbci	r31, 0xFC	; 252
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	01 80       	ldd	r0, Z+1	; 0x01
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <Dio_WriteChannel+0x68>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <Dio_WriteChannel+0x64>
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	8b bb       	out	0x1b, r24	; 27
 5de:	08 95       	ret
 5e0:	61 30       	cpi	r22, 0x01	; 1
 5e2:	89 f4       	brne	.+34     	; 0x606 <Dio_WriteChannel+0x9a>
 5e4:	28 b3       	in	r18, 0x18	; 24
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	fc 01       	movw	r30, r24
 5ec:	ec 5c       	subi	r30, 0xCC	; 204
 5ee:	fc 4f       	sbci	r31, 0xFC	; 252
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	01 80       	ldd	r0, Z+1	; 0x01
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <Dio_WriteChannel+0x90>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <Dio_WriteChannel+0x8c>
 600:	82 2b       	or	r24, r18
 602:	88 bb       	out	0x18, r24	; 24
 604:	08 95       	ret
 606:	28 b3       	in	r18, 0x18	; 24
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	fc 01       	movw	r30, r24
 60e:	ec 5c       	subi	r30, 0xCC	; 204
 610:	fc 4f       	sbci	r31, 0xFC	; 252
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	01 80       	ldd	r0, Z+1	; 0x01
 618:	02 c0       	rjmp	.+4      	; 0x61e <Dio_WriteChannel+0xb2>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <Dio_WriteChannel+0xae>
 622:	80 95       	com	r24
 624:	82 23       	and	r24, r18
 626:	88 bb       	out	0x18, r24	; 24
 628:	08 95       	ret
 62a:	61 30       	cpi	r22, 0x01	; 1
 62c:	89 f4       	brne	.+34     	; 0x650 <Dio_WriteChannel+0xe4>
 62e:	25 b3       	in	r18, 0x15	; 21
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	fc 01       	movw	r30, r24
 636:	ec 5c       	subi	r30, 0xCC	; 204
 638:	fc 4f       	sbci	r31, 0xFC	; 252
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	01 80       	ldd	r0, Z+1	; 0x01
 640:	02 c0       	rjmp	.+4      	; 0x646 <Dio_WriteChannel+0xda>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <Dio_WriteChannel+0xd6>
 64a:	82 2b       	or	r24, r18
 64c:	85 bb       	out	0x15, r24	; 21
 64e:	08 95       	ret
 650:	25 b3       	in	r18, 0x15	; 21
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	fc 01       	movw	r30, r24
 658:	ec 5c       	subi	r30, 0xCC	; 204
 65a:	fc 4f       	sbci	r31, 0xFC	; 252
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	01 80       	ldd	r0, Z+1	; 0x01
 662:	02 c0       	rjmp	.+4      	; 0x668 <Dio_WriteChannel+0xfc>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	0a 94       	dec	r0
 66a:	e2 f7       	brpl	.-8      	; 0x664 <Dio_WriteChannel+0xf8>
 66c:	80 95       	com	r24
 66e:	82 23       	and	r24, r18
 670:	85 bb       	out	0x15, r24	; 21
 672:	08 95       	ret
 674:	61 30       	cpi	r22, 0x01	; 1
 676:	89 f4       	brne	.+34     	; 0x69a <Dio_WriteChannel+0x12e>
 678:	22 b3       	in	r18, 0x12	; 18
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	fc 01       	movw	r30, r24
 680:	ec 5c       	subi	r30, 0xCC	; 204
 682:	fc 4f       	sbci	r31, 0xFC	; 252
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	01 80       	ldd	r0, Z+1	; 0x01
 68a:	02 c0       	rjmp	.+4      	; 0x690 <Dio_WriteChannel+0x124>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	0a 94       	dec	r0
 692:	e2 f7       	brpl	.-8      	; 0x68c <Dio_WriteChannel+0x120>
 694:	82 2b       	or	r24, r18
 696:	82 bb       	out	0x12, r24	; 18
 698:	08 95       	ret
 69a:	22 b3       	in	r18, 0x12	; 18
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	fc 01       	movw	r30, r24
 6a2:	ec 5c       	subi	r30, 0xCC	; 204
 6a4:	fc 4f       	sbci	r31, 0xFC	; 252
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	01 80       	ldd	r0, Z+1	; 0x01
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <Dio_WriteChannel+0x146>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	0a 94       	dec	r0
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <Dio_WriteChannel+0x142>
 6b6:	80 95       	com	r24
 6b8:	82 23       	and	r24, r18
 6ba:	82 bb       	out	0x12, r24	; 18
 6bc:	08 95       	ret

000006be <Dio_WriteChannelGroup>:
 6be:	af 92       	push	r10
 6c0:	bf 92       	push	r11
 6c2:	cf 92       	push	r12
 6c4:	df 92       	push	r13
 6c6:	ef 92       	push	r14
 6c8:	ff 92       	push	r15
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	e6 2e       	mov	r14, r22
 6d4:	f1 2c       	mov	r15, r1
 6d6:	1e 14       	cp	r1, r14
 6d8:	1f 04       	cpc	r1, r15
 6da:	04 f5       	brge	.+64     	; 0x71c <Dio_WriteChannelGroup+0x5e>
 6dc:	c8 2f       	mov	r28, r24
 6de:	d9 2f       	mov	r29, r25
 6e0:	a1 2c       	mov	r10, r1
 6e2:	b1 2c       	mov	r11, r1
 6e4:	cc 24       	eor	r12, r12
 6e6:	c3 94       	inc	r12
 6e8:	d1 2c       	mov	r13, r1
 6ea:	04 2f       	mov	r16, r20
 6ec:	10 e0       	ldi	r17, 0x00	; 0
 6ee:	b6 01       	movw	r22, r12
 6f0:	0a 2c       	mov	r0, r10
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <Dio_WriteChannelGroup+0x3a>
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	0a 94       	dec	r0
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <Dio_WriteChannelGroup+0x36>
 6fc:	60 23       	and	r22, r16
 6fe:	71 23       	and	r23, r17
 700:	0a 2c       	mov	r0, r10
 702:	02 c0       	rjmp	.+4      	; 0x708 <Dio_WriteChannelGroup+0x4a>
 704:	76 95       	lsr	r23
 706:	67 95       	ror	r22
 708:	0a 94       	dec	r0
 70a:	e2 f7       	brpl	.-8      	; 0x704 <Dio_WriteChannelGroup+0x46>
 70c:	89 91       	ld	r24, Y+
 70e:	2e df       	rcall	.-420    	; 0x56c <Dio_WriteChannel>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	a8 1a       	sub	r10, r24
 714:	b8 0a       	sbc	r11, r24
 716:	ae 14       	cp	r10, r14
 718:	bf 04       	cpc	r11, r15
 71a:	49 f7       	brne	.-46     	; 0x6ee <Dio_WriteChannelGroup+0x30>
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	df 90       	pop	r13
 72a:	cf 90       	pop	r12
 72c:	bf 90       	pop	r11
 72e:	af 90       	pop	r10
 730:	08 95       	ret

00000732 <Dio_InitChannelGroup>:
 * Note:
 *   - This function should be called during the initialization phase of the software.
 *   - Ensure proper initialization of Dio_ChannelConfig array before calling this function.
 **************************************************************/
void Dio_InitChannelGroup(uint8_t* ChannelIds, uint8_t Size, Dio_DirectionType* Directions)
{
 732:	ef 92       	push	r14
 734:	ff 92       	push	r15
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
    for (int i = 0; i < Size; i++)
 73e:	66 23       	and	r22, r22
 740:	71 f0       	breq	.+28     	; 0x75e <Dio_InitChannelGroup+0x2c>
 742:	7a 01       	movw	r14, r20
 744:	ea 01       	movw	r28, r20
 746:	08 2f       	mov	r16, r24
 748:	19 2f       	mov	r17, r25
 74a:	e6 0e       	add	r14, r22
 74c:	f1 1c       	adc	r15, r1
    {
        Dio_InitChannel(ChannelIds[i], Directions[i]);
 74e:	69 91       	ld	r22, Y+
 750:	f8 01       	movw	r30, r16
 752:	81 91       	ld	r24, Z+
 754:	8f 01       	movw	r16, r30
 756:	61 de       	rcall	.-830    	; 0x41a <Dio_InitChannel>
 *   - This function should be called during the initialization phase of the software.
 *   - Ensure proper initialization of Dio_ChannelConfig array before calling this function.
 **************************************************************/
void Dio_InitChannelGroup(uint8_t* ChannelIds, uint8_t Size, Dio_DirectionType* Directions)
{
    for (int i = 0; i < Size; i++)
 758:	ce 15       	cp	r28, r14
 75a:	df 05       	cpc	r29, r15
 75c:	c1 f7       	brne	.-16     	; 0x74e <Dio_InitChannelGroup+0x1c>
    {
        Dio_InitChannel(ChannelIds[i], Directions[i]);
    }
}
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	ff 90       	pop	r15
 768:	ef 90       	pop	r14
 76a:	08 95       	ret

0000076c <__fixunssfsi>:
 76c:	70 d0       	rcall	.+224    	; 0x84e <__fp_splitA>
 76e:	88 f0       	brcs	.+34     	; 0x792 <__fixunssfsi+0x26>
 770:	9f 57       	subi	r25, 0x7F	; 127
 772:	90 f0       	brcs	.+36     	; 0x798 <__fixunssfsi+0x2c>
 774:	b9 2f       	mov	r27, r25
 776:	99 27       	eor	r25, r25
 778:	b7 51       	subi	r27, 0x17	; 23
 77a:	a0 f0       	brcs	.+40     	; 0x7a4 <__fixunssfsi+0x38>
 77c:	d1 f0       	breq	.+52     	; 0x7b2 <__fixunssfsi+0x46>
 77e:	66 0f       	add	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	1a f0       	brmi	.+6      	; 0x78e <__fixunssfsi+0x22>
 788:	ba 95       	dec	r27
 78a:	c9 f7       	brne	.-14     	; 0x77e <__fixunssfsi+0x12>
 78c:	12 c0       	rjmp	.+36     	; 0x7b2 <__fixunssfsi+0x46>
 78e:	b1 30       	cpi	r27, 0x01	; 1
 790:	81 f0       	breq	.+32     	; 0x7b2 <__fixunssfsi+0x46>
 792:	77 d0       	rcall	.+238    	; 0x882 <__fp_zero>
 794:	b1 e0       	ldi	r27, 0x01	; 1
 796:	08 95       	ret
 798:	74 c0       	rjmp	.+232    	; 0x882 <__fp_zero>
 79a:	67 2f       	mov	r22, r23
 79c:	78 2f       	mov	r23, r24
 79e:	88 27       	eor	r24, r24
 7a0:	b8 5f       	subi	r27, 0xF8	; 248
 7a2:	39 f0       	breq	.+14     	; 0x7b2 <__fixunssfsi+0x46>
 7a4:	b9 3f       	cpi	r27, 0xF9	; 249
 7a6:	cc f3       	brlt	.-14     	; 0x79a <__fixunssfsi+0x2e>
 7a8:	86 95       	lsr	r24
 7aa:	77 95       	ror	r23
 7ac:	67 95       	ror	r22
 7ae:	b3 95       	inc	r27
 7b0:	d9 f7       	brne	.-10     	; 0x7a8 <__fixunssfsi+0x3c>
 7b2:	3e f4       	brtc	.+14     	; 0x7c2 <__fixunssfsi+0x56>
 7b4:	90 95       	com	r25
 7b6:	80 95       	com	r24
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	08 95       	ret

000007c4 <__floatunsisf>:
 7c4:	e8 94       	clt
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <__floatsisf+0x12>

000007c8 <__floatsisf>:
 7c8:	97 fb       	bst	r25, 7
 7ca:	3e f4       	brtc	.+14     	; 0x7da <__floatsisf+0x12>
 7cc:	90 95       	com	r25
 7ce:	80 95       	com	r24
 7d0:	70 95       	com	r23
 7d2:	61 95       	neg	r22
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	99 23       	and	r25, r25
 7dc:	a9 f0       	breq	.+42     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7de:	f9 2f       	mov	r31, r25
 7e0:	96 e9       	ldi	r25, 0x96	; 150
 7e2:	bb 27       	eor	r27, r27
 7e4:	93 95       	inc	r25
 7e6:	f6 95       	lsr	r31
 7e8:	87 95       	ror	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b7 95       	ror	r27
 7f0:	f1 11       	cpse	r31, r1
 7f2:	f8 cf       	rjmp	.-16     	; 0x7e4 <__floatsisf+0x1c>
 7f4:	fa f4       	brpl	.+62     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7f6:	bb 0f       	add	r27, r27
 7f8:	11 f4       	brne	.+4      	; 0x7fe <__floatsisf+0x36>
 7fa:	60 ff       	sbrs	r22, 0
 7fc:	1b c0       	rjmp	.+54     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	16 c0       	rjmp	.+44     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 808:	88 23       	and	r24, r24
 80a:	11 f0       	breq	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	96 e9       	ldi	r25, 0x96	; 150
 80e:	11 c0       	rjmp	.+34     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 810:	77 23       	and	r23, r23
 812:	21 f0       	breq	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 814:	9e e8       	ldi	r25, 0x8E	; 142
 816:	87 2f       	mov	r24, r23
 818:	76 2f       	mov	r23, r22
 81a:	05 c0       	rjmp	.+10     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81c:	66 23       	and	r22, r22
 81e:	71 f0       	breq	.+28     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 820:	96 e8       	ldi	r25, 0x86	; 134
 822:	86 2f       	mov	r24, r22
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	2a f0       	brmi	.+10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82a:	9a 95       	dec	r25
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	da f7       	brpl	.-10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 834:	88 0f       	add	r24, r24
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <__fp_split3>:
 83e:	57 fd       	sbrc	r21, 7
 840:	90 58       	subi	r25, 0x80	; 128
 842:	44 0f       	add	r20, r20
 844:	55 1f       	adc	r21, r21
 846:	59 f0       	breq	.+22     	; 0x85e <__fp_splitA+0x10>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	71 f0       	breq	.+28     	; 0x868 <__stack+0x9>
 84c:	47 95       	ror	r20

0000084e <__fp_splitA>:
 84e:	88 0f       	add	r24, r24
 850:	97 fb       	bst	r25, 7
 852:	99 1f       	adc	r25, r25
 854:	61 f0       	breq	.+24     	; 0x86e <__stack+0xf>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	79 f0       	breq	.+30     	; 0x878 <__stack+0x19>
 85a:	87 95       	ror	r24
 85c:	08 95       	ret
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	55 1f       	adc	r21, r21
 866:	f2 cf       	rjmp	.-28     	; 0x84c <__fp_split3+0xe>
 868:	46 95       	lsr	r20
 86a:	f1 df       	rcall	.-30     	; 0x84e <__fp_splitA>
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__stack+0x1f>
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	99 1f       	adc	r25, r25
 876:	f1 cf       	rjmp	.-30     	; 0x85a <__fp_splitA+0xc>
 878:	86 95       	lsr	r24
 87a:	71 05       	cpc	r23, r1
 87c:	61 05       	cpc	r22, r1
 87e:	08 94       	sec
 880:	08 95       	ret

00000882 <__fp_zero>:
 882:	e8 94       	clt

00000884 <__fp_szero>:
 884:	bb 27       	eor	r27, r27
 886:	66 27       	eor	r22, r22
 888:	77 27       	eor	r23, r23
 88a:	cb 01       	movw	r24, r22
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__mulsf3>:
 890:	0b d0       	rcall	.+22     	; 0x8a8 <__mulsf3x>
 892:	78 c0       	rjmp	.+240    	; 0x984 <__fp_round>
 894:	69 d0       	rcall	.+210    	; 0x968 <__fp_pscA>
 896:	28 f0       	brcs	.+10     	; 0x8a2 <__mulsf3+0x12>
 898:	6e d0       	rcall	.+220    	; 0x976 <__fp_pscB>
 89a:	18 f0       	brcs	.+6      	; 0x8a2 <__mulsf3+0x12>
 89c:	95 23       	and	r25, r21
 89e:	09 f0       	breq	.+2      	; 0x8a2 <__mulsf3+0x12>
 8a0:	5a c0       	rjmp	.+180    	; 0x956 <__fp_inf>
 8a2:	5f c0       	rjmp	.+190    	; 0x962 <__fp_nan>
 8a4:	11 24       	eor	r1, r1
 8a6:	ee cf       	rjmp	.-36     	; 0x884 <__fp_szero>

000008a8 <__mulsf3x>:
 8a8:	ca df       	rcall	.-108    	; 0x83e <__fp_split3>
 8aa:	a0 f3       	brcs	.-24     	; 0x894 <__mulsf3+0x4>

000008ac <__mulsf3_pse>:
 8ac:	95 9f       	mul	r25, r21
 8ae:	d1 f3       	breq	.-12     	; 0x8a4 <__mulsf3+0x14>
 8b0:	95 0f       	add	r25, r21
 8b2:	50 e0       	ldi	r21, 0x00	; 0
 8b4:	55 1f       	adc	r21, r21
 8b6:	62 9f       	mul	r22, r18
 8b8:	f0 01       	movw	r30, r0
 8ba:	72 9f       	mul	r23, r18
 8bc:	bb 27       	eor	r27, r27
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	63 9f       	mul	r22, r19
 8c4:	aa 27       	eor	r26, r26
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	aa 1f       	adc	r26, r26
 8cc:	64 9f       	mul	r22, r20
 8ce:	66 27       	eor	r22, r22
 8d0:	b0 0d       	add	r27, r0
 8d2:	a1 1d       	adc	r26, r1
 8d4:	66 1f       	adc	r22, r22
 8d6:	82 9f       	mul	r24, r18
 8d8:	22 27       	eor	r18, r18
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	73 9f       	mul	r23, r19
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	83 9f       	mul	r24, r19
 8ea:	a0 0d       	add	r26, r0
 8ec:	61 1d       	adc	r22, r1
 8ee:	22 1f       	adc	r18, r18
 8f0:	74 9f       	mul	r23, r20
 8f2:	33 27       	eor	r19, r19
 8f4:	a0 0d       	add	r26, r0
 8f6:	61 1d       	adc	r22, r1
 8f8:	23 1f       	adc	r18, r19
 8fa:	84 9f       	mul	r24, r20
 8fc:	60 0d       	add	r22, r0
 8fe:	21 1d       	adc	r18, r1
 900:	82 2f       	mov	r24, r18
 902:	76 2f       	mov	r23, r22
 904:	6a 2f       	mov	r22, r26
 906:	11 24       	eor	r1, r1
 908:	9f 57       	subi	r25, 0x7F	; 127
 90a:	50 40       	sbci	r21, 0x00	; 0
 90c:	8a f0       	brmi	.+34     	; 0x930 <__mulsf3_pse+0x84>
 90e:	e1 f0       	breq	.+56     	; 0x948 <__mulsf3_pse+0x9c>
 910:	88 23       	and	r24, r24
 912:	4a f0       	brmi	.+18     	; 0x926 <__mulsf3_pse+0x7a>
 914:	ee 0f       	add	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	bb 1f       	adc	r27, r27
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	91 50       	subi	r25, 0x01	; 1
 922:	50 40       	sbci	r21, 0x00	; 0
 924:	a9 f7       	brne	.-22     	; 0x910 <__mulsf3_pse+0x64>
 926:	9e 3f       	cpi	r25, 0xFE	; 254
 928:	51 05       	cpc	r21, r1
 92a:	70 f0       	brcs	.+28     	; 0x948 <__mulsf3_pse+0x9c>
 92c:	14 c0       	rjmp	.+40     	; 0x956 <__fp_inf>
 92e:	aa cf       	rjmp	.-172    	; 0x884 <__fp_szero>
 930:	5f 3f       	cpi	r21, 0xFF	; 255
 932:	ec f3       	brlt	.-6      	; 0x92e <__mulsf3_pse+0x82>
 934:	98 3e       	cpi	r25, 0xE8	; 232
 936:	dc f3       	brlt	.-10     	; 0x92e <__mulsf3_pse+0x82>
 938:	86 95       	lsr	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b7 95       	ror	r27
 940:	f7 95       	ror	r31
 942:	e7 95       	ror	r30
 944:	9f 5f       	subi	r25, 0xFF	; 255
 946:	c1 f7       	brne	.-16     	; 0x938 <__mulsf3_pse+0x8c>
 948:	fe 2b       	or	r31, r30
 94a:	88 0f       	add	r24, r24
 94c:	91 1d       	adc	r25, r1
 94e:	96 95       	lsr	r25
 950:	87 95       	ror	r24
 952:	97 f9       	bld	r25, 7
 954:	08 95       	ret

00000956 <__fp_inf>:
 956:	97 f9       	bld	r25, 7
 958:	9f 67       	ori	r25, 0x7F	; 127
 95a:	80 e8       	ldi	r24, 0x80	; 128
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	08 95       	ret

00000962 <__fp_nan>:
 962:	9f ef       	ldi	r25, 0xFF	; 255
 964:	80 ec       	ldi	r24, 0xC0	; 192
 966:	08 95       	ret

00000968 <__fp_pscA>:
 968:	00 24       	eor	r0, r0
 96a:	0a 94       	dec	r0
 96c:	16 16       	cp	r1, r22
 96e:	17 06       	cpc	r1, r23
 970:	18 06       	cpc	r1, r24
 972:	09 06       	cpc	r0, r25
 974:	08 95       	ret

00000976 <__fp_pscB>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	12 16       	cp	r1, r18
 97c:	13 06       	cpc	r1, r19
 97e:	14 06       	cpc	r1, r20
 980:	05 06       	cpc	r0, r21
 982:	08 95       	ret

00000984 <__fp_round>:
 984:	09 2e       	mov	r0, r25
 986:	03 94       	inc	r0
 988:	00 0c       	add	r0, r0
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0xc>
 98c:	88 23       	and	r24, r24
 98e:	52 f0       	brmi	.+20     	; 0x9a4 <__fp_round+0x20>
 990:	bb 0f       	add	r27, r27
 992:	40 f4       	brcc	.+16     	; 0x9a4 <__fp_round+0x20>
 994:	bf 2b       	or	r27, r31
 996:	11 f4       	brne	.+4      	; 0x99c <__fp_round+0x18>
 998:	60 ff       	sbrs	r22, 0
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <__fp_round+0x20>
 99c:	6f 5f       	subi	r22, 0xFF	; 255
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	08 95       	ret

000009a6 <__divmodhi4>:
 9a6:	97 fb       	bst	r25, 7
 9a8:	07 2e       	mov	r0, r23
 9aa:	16 f4       	brtc	.+4      	; 0x9b0 <__divmodhi4+0xa>
 9ac:	00 94       	com	r0
 9ae:	06 d0       	rcall	.+12     	; 0x9bc <__divmodhi4_neg1>
 9b0:	77 fd       	sbrc	r23, 7
 9b2:	08 d0       	rcall	.+16     	; 0x9c4 <__divmodhi4_neg2>
 9b4:	0b d0       	rcall	.+22     	; 0x9cc <__udivmodhi4>
 9b6:	07 fc       	sbrc	r0, 7
 9b8:	05 d0       	rcall	.+10     	; 0x9c4 <__divmodhi4_neg2>
 9ba:	3e f4       	brtc	.+14     	; 0x9ca <__divmodhi4_exit>

000009bc <__divmodhi4_neg1>:
 9bc:	90 95       	com	r25
 9be:	81 95       	neg	r24
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__divmodhi4_neg2>:
 9c4:	70 95       	com	r23
 9c6:	61 95       	neg	r22
 9c8:	7f 4f       	sbci	r23, 0xFF	; 255

000009ca <__divmodhi4_exit>:
 9ca:	08 95       	ret

000009cc <__udivmodhi4>:
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	51 e1       	ldi	r21, 0x11	; 17
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__udivmodhi4_ep>

000009d4 <__udivmodhi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	a6 17       	cp	r26, r22
 9da:	b7 07       	cpc	r27, r23
 9dc:	10 f0       	brcs	.+4      	; 0x9e2 <__udivmodhi4_ep>
 9de:	a6 1b       	sub	r26, r22
 9e0:	b7 0b       	sbc	r27, r23

000009e2 <__udivmodhi4_ep>:
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	5a 95       	dec	r21
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__udivmodhi4_loop>
 9ea:	80 95       	com	r24
 9ec:	90 95       	com	r25
 9ee:	bc 01       	movw	r22, r24
 9f0:	cd 01       	movw	r24, r26
 9f2:	08 95       	ret

000009f4 <_exit>:
 9f4:	f8 94       	cli

000009f6 <__stop_program>:
 9f6:	ff cf       	rjmp	.-2      	; 0x9f6 <__stop_program>
